https://stackoverflow.com/questions/574195/android-youtube-app-play-video-intent/12439378#12439378

https://stackoverflow.com/questions/56491694/how-to-play-youtube-video-inside-my-activity-picture-in-picture-mode

2/1/2020
1. pause video programatically, question answer class, on submit store the answers and rediret back to video activity and play from wher it stopped and repeat the same.
2. make ppl watch the whole video(15sec) with no manual pause or play.. and provide a button watch again and an answer button
removing the video view related functionalities.. before code

package com.example.my_badminton;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.MediaController;
import android.widget.Toast;
import android.widget.VideoView;

import androidx.annotation.RequiresApi;

import java.time.Duration;
import java.time.Instant;

public class YoutubeTrail extends Activity {
    String html = "<iframe width=\"560\" height=\"315\" src=\"http://www.youtube.com/watch?v=cRFnsOUoHmM\" frameborder=\"0\" allowfullscreen></iframe>\"";
    String url = "<iframe src='https://www.youtube.com/watch?v=cRFnsOUoHmM?fs=0' width='100%' height='100%' style='border: none;'></iframe>";
    int prevPausePos, currPausePos, pauseFlag, secondsCompleted, answerFlag;
    Button watchAgain, answerQuestions;
    String link;
    private VideoView vv;
    Runnable stopPlayerTask = new Runnable() {
        @Override
        public void run() {
            vv.pause();
            currPausePos = vv.getCurrentPosition();
            answerQuestions.setEnabled(true);
//          startActivity(new Intent(YoutubeTrail.this,SubmitAnswer.class));
//            showQuestions();
        }
    };


    private void showQuestions() {
        new AlertDialog.Builder(this)
                .setTitle("Answer the question")
                .setMessage("Q1.xxxxx?")
                .setIcon(android.R.drawable.ic_dialog_info)
                .setPositiveButton("ans", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        answerFlag = 1;
                        vv.seekTo(currPausePos);
                        vv.start();
                        autoPauseVideo();
                    }
                }).show();
    }

    @SuppressLint("SetJavaScriptEnabled")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_paly_video);
        vv = (VideoView) findViewById(R.id.video_view);
        watchAgain = findViewById(R.id.watch_again);
        answerQuestions = findViewById(R.id.answer_questions);
        watchAgain.setEnabled(false);
        answerQuestions.setEnabled(false);
        try {
            link = "http://stage1.optipacetech.com/badminton/videos/counting.mp4";
            MediaController mediaController = new MediaController(this);
            mediaController.setAnchorView(vv);
            Uri video = Uri.parse(link);
            vv.setMediaController(null);
            vv.setVideoURI(video);
            vv.start();
            autoPauseVideo();


        } catch (Exception e) {
            // TODO: handle exception
            Toast.makeText(this, "Error connecting", Toast.LENGTH_SHORT).show();
        }

    }

    private void autoPauseVideo() {
        Handler handler = new Handler();
        handler.postDelayed(stopPlayerTask, 12000 /*+ (secondsCompleted+1000)*/);//pauses at 9 secs
        watchAgain.setEnabled(true);
    }


    @RequiresApi(api = Build.VERSION_CODES.O)
    public void palyVideo(View view) throws InterruptedException {
        if (pauseFlag == 1) {
//            currPausePos = vv.getCurrentPosition();
            vv.seekTo(currPausePos);
            vv.start();
            Instant ends = Instant.now();
            Instant starts = Instant.now();
            Thread.sleep(10);

            Log.e("instant ", " " + Duration.between(starts, ends));
            autoPauseVideo();
        } else {
            watchAgain.setEnabled(false);
        }

    }

    @RequiresApi(api = Build.VERSION_CODES.O)
    public void pauseVideo(View view) throws InterruptedException {
        vv.pause();
        pauseFlag = 1;
        currPausePos = vv.getCurrentPosition();



       /* Stopwatch stopwatch = Stopwatch.createStarted();
        doSomething();
        stopwatch.stop(); // optional

        long millis = stopwatch.elapsed(TimeUnit.MILLISECONDS);

        log.info("that took: " + stopwatch); // formatted string like "12.3 ms"*/

    }

    public void answerQuestions(View view) {
        Toast.makeText(this, "Redirect to class!!!", Toast.LENGTH_SHORT).show();
        showQuestions();
     /*   vv.seekTo(currPausePos);
        vv.start();
        autoPauseVideo();*/
    }

    public void watchAgain(View view) {
        if (answerFlag == 1) {
            vv.seekTo(currPausePos);
        } else {
            
            vv.seekTo(prevPausePos);
        }
        vv.start();
        autoPauseVideo();


    }
}


07/01/2020
1. disable answer/watch button till the video stops automatically--- done
2. cant play the video. for android version 9 and above
 added *****android:usesCleartextTraffic="true" in manifest****** and worked

below is the clarification from android doc
___________________________________________________________________________________________________________________________________________________________
Indicates whether the app intends to use cleartext network traffic, such as cleartext HTTP. The default value for apps that target API level 27 or lower is "true". Apps that target API level 28 or higher default to "false".

When the attribute is set to "false", platform components (for example, HTTP and FTP stacks, DownloadManager, and MediaPlayer) will refuse the app's requests to use cleartext traffic. Third-party libraries are strongly encouraged to honor this setting as well. The key reason for avoiding cleartext traffic is the lack of confidentiality, authenticity, and protections against tampering; a network attacker can eavesdrop on transmitted data and also modify it without being detected.
___________________________________________________________________________________________________________________________________________________________

08/01/2020

wifi manager is added..

13/01/2020
pager2 with tab layout pending..

14/01/2020

preserve the value when switching from frame to frame
___________________________________________________________________________________________________________________________________________________________
16/01/2020
1.make fragmnet to get displayed
Bundle b = new Bundle();
b.putString("Key", "YourValue");
b.putInt("YourKey", 1);

2. make frgmnet available in an activity
FragmentB fragB = new FragmentB();
3.get the pauses from db onItemClick listener in the listofviews
fragB.setArguments(b); 
getFragmentManager().beginTransaction().replace(R.id.your_container, fragB);

Fragment B:

Bundle b = this.getArguments();
if(b != null){
   int i = b.getInt("YourKey");
   String s =b.getString("Key");
}

STOP THE VIDEO AT GIVEN TIME:
 if (mVideoView.getCurrentPosition() >= 12000) {
                            mVideoView.stopPlayback();
                            mShouldStop = true;
                        }

3.
thread is used to to stop at desired time.. which is not acting on views.. 
before adding the pauses:
package com.example.my_badminton;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.provider.Settings;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.MediaController;
import android.widget.Toast;
import android.widget.VideoView;

import java.io.IOException;

public class YoutubeTrail extends Activity {
    String html = "<iframe width=\"560\" height=\"315\" src=\"http://www.youtube.com/watch?v=cRFnsOUoHmM\" frameborder=\"0\" allowfullscreen></iframe>\"";
    String url = "<iframe src='https://www.youtube.com/watch?v=cRFnsOUoHmM?fs=0' width='100%' height='100%' style='border: none;'></iframe>";

    int initPos, currPos, watchAgainCount;
    Button watchAgain, answerQuestions;
    String link;
    MediaController mediaController;
    Handler handler;
    Intent intent;
    int REQUEST_ANSWER = 1;
    private boolean isReceiverRegistered = false;

    private VideoView vv;
    Runnable stopPlayerTask = new Runnable() {
        @Override
        public void run() {
            vv.pause();
            currPos = vv.getCurrentPosition();
//            watchAgain.setEnabled(true);
//            answerQuestions.setEnabled(true);
            buttonEnable();
            watchAgainCount = 0;

        }
    };
    private BroadcastReceiver receiver = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            NetworkInfo info = getNetworkInfo(context);
            if (info != null && info.isConnected()) {
                //Todo code to execute if wifi connected
            } else {                  //Todo code to execute if wifi disconnected
            }
        }
    };
    private String shotLoc, shotType;
    private boolean shdStop=false;

    private void buttonEnable() {
        watchAgain.setVisibility(View.VISIBLE);
        answerQuestions.setVisibility(View.VISIBLE);
    }

    private void showQuestions() {
        intent = new Intent(this, SubmitAnswer.class);

        new AlertDialog.Builder(this)
                .setTitle("Answer the question")
                .setMessage("Q1.xxxxx?")
                .setIcon(android.R.drawable.ic_dialog_info)
                .setPositiveButton("ans", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        startActivityForResult(intent, REQUEST_ANSWER);
                       /* initPos = currPos;
                        vv.seekTo(initPos);
                        vv.start();
                        buttonDisable();
//                        answerQuestions.setEnabled(false);
                        autoPauseVideo();*/
                    }
                }).show();
    }

    private void buttonDisable() {
        watchAgain.setVisibility(View.GONE);
        answerQuestions.setVisibility(View.GONE);
    }

    @SuppressLint("SetJavaScriptEnabled")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_paly_video);
        vv = (VideoView) findViewById(R.id.video_view);
        watchAgain = findViewById(R.id.watch_again);
        answerQuestions = findViewById(R.id.answer_questions);
        link = "http://stage1.optipacetech.com/badminton/videos/counting.mp4";
        handler = new Handler();
/*        if (isConnectingToInternet(this)) {
//            onStart();
            try {
                mediaController = new MediaController(this);
                mediaController.setAnchorView(vv);
                Uri video = Uri.parse(link);
                vv.setMediaController(null);
                vv.setVideoURI(video);
                vv.start();
                autoPauseVideo();


            } catch (Exception e) {
                // TODO: handle exception
                Toast.makeText(this, "Error connecting", Toast.LENGTH_SHORT).show();
            }
        } else {
//            enableWifi();

        }*/


//        watchAgain.setEnabled(false);
//        answerQuestions.setEnabled(false);


    }

    private void autoPauseVideo() {
//        handler.postDelayed(stopPlayerTask, 12000 /*+ (secondsCompleted+1000)*/);//pauses at 9 secs
        new Thread(new Runnable() {
            @Override
            public void run() {
                while(!shdStop)
                if (vv.getCurrentPosition() >= 12000) {
                    vv.stopPlayback();
                    shdStop=true;
                }
            }
        }).start();
    }

    public void answerQuestions(View view) {
        showQuestions();
    }

    public void watchAgain(View view) {
//        if (answerFlag == 0)
        if (watchAgainCount == 0) {
            watchAgainCount++;

            vv.seekTo(initPos);
//        else
//        vv.seekTo(currPos);

            vv.start();
//            answerQuestions.setEnabled(false);
            buttonDisable();
            autoPauseVideo();
        } else {
            Toast.makeText(this, "please wait!!", Toast.LENGTH_SHORT).show();
        }
    }

    private boolean isConnectingToInternet(Context applicationContext) {
        Runtime runtime = Runtime.getRuntime();
        try {
            Process mIpAddrProcess = runtime.exec("/system/bin/ping -c 1 8.8.8.8");
            int mExitValue = mIpAddrProcess.waitFor();
            System.out.println(" mExitValue " + mExitValue);
            if (mExitValue == 0) {
                return true;
            } else {
                return false;
            }
        } catch (InterruptedException ignore) {
            ignore.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    @Override
    protected void onStart() {

        super.onStart();
        if (isConnectingToInternet(this))
            try {
                mediaController = new MediaController(this);
                mediaController.setAnchorView(vv);
                Uri video = Uri.parse(link);
                vv.setMediaController(null);
                vv.setVideoURI(video);
                vv.seekTo(initPos);
                vv.start();
                buttonDisable();
                autoPauseVideo();


            } catch (Exception e) {
                // TODO: handle exception
                Toast.makeText(this, "Error connecting", Toast.LENGTH_SHORT).show();
            }
        else {
            Toast.makeText(this, "No Network", Toast.LENGTH_SHORT).show();
//            registerReceiver(receiver, new IntentFilter("android.net.conn.CONNECTIVITY_CHANGE"));

            enableWifi();
        }
    }

    private void enableWifi() {
        AlertDialog.Builder alertDialog = new AlertDialog.Builder(
                this);
        alertDialog.setTitle("Confirm...");
        alertDialog.setMessage("Do you want to go to wifi settings?");
        alertDialog.setPositiveButton("yes",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        startActivity(new Intent(Settings.ACTION_WIFI_SETTINGS));
                    }
                });
        alertDialog.setNegativeButton("no",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.cancel();
                    }
                });
        alertDialog.show();
    }

    @Override
    protected void onPause() {
        super.onPause();
        buttonDisable();
        handler.removeCallbacks(stopPlayerTask);
        if (isReceiverRegistered) {
            isReceiverRegistered = false;

            unregisterReceiver(receiver);
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
//        registerReceiver(receiver, new IntentFilter("android.net.conn.CONNECTIVITY_CHANGE"));
        if (!isReceiverRegistered) {
            isReceiverRegistered = true;
            registerReceiver(receiver, new IntentFilter("android.net.wifi.STATE_CHANGE"));
            vv.resume();
        }
    }

    private NetworkInfo getNetworkInfo(Context context) {
        ConnectivityManager connManager = (ConnectivityManager)
                context.getSystemService(Context.CONNECTIVITY_SERVICE);
        return connManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == REQUEST_ANSWER) {
            if (resultCode == Activity.RESULT_OK) {
                Bundle bundle = data.getExtras();
                shotLoc = (String) bundle.get("shot_location");
                shotType = (String) bundle.get("shot_type");
                Log.e("type and loc", "onActivityResult: " + shotLoc + "\n" + shotType);
                    /*Intent intent;
                    intent = new Intent(SwipeCard.this, OnlineTransActivity.class);
                    intent.putExtras(bundle);
                    startActivity(intent);*/
                initPos = currPos;
                vv.seekTo(initPos);
                vv.start();
                buttonDisable();
                autoPauseVideo();


            } else {
                Toast.makeText(getApplicationContext(), "Answer is not submitted", Toast.LENGTH_SHORT).show();
            }
        }

    }


}
___________________________________________________________________________________________________________________________________________________________
17/01/2019
1.place hint buttons on next to buttons.
2.ask karthik if long press buttons are ok?
3.display the result.
___________________________________________________________________________________________________________________________________________________________
20/01/2020
1.
image inside dialog
Dialog settingsDialog = new Dialog(this);
settingsDialog.getWindow().requestFeature(Window.FEATURE_NO_TITLE);
settingsDialog.setContentView(getLayoutInflater().inflate(R.layout.image_layout
        , null));
settingsDialog.show();

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="wrap_content" android:layout_height="wrap_content"
    android:orientation="vertical">
    <ImageView android:layout_width="wrap_content" 
        android:layout_height="wrap_content" android:src="YOUR IMAGE"/>
    <Button android:layout_width="wrap_content" android:layout_height="wrap_content"
        android:text="OK" android:onClick="dismissListener"/>
</LinearLayout>

2.add listview in scroll view..

___________________________________________________________________________________________________________________________________________________________
21/01/2020
1. add customized array
22/01/2020
1. create answers(model) and add setter and getters. and add this object in array adapter.
/data/data/com.example.my_badminton

___________________________________________________________________________________________________________________________________________________________
28/01/2020
provider:

package com.example.my_badminton;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.media.MediaPlayer;
import android.media.PlaybackParams;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.provider.Settings;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.MediaController;
import android.widget.Toast;
import android.widget.VideoView;

import com.google.android.youtube.player.YouTubeBaseActivity;
import com.google.android.youtube.player.YouTubeInitializationResult;
import com.google.android.youtube.player.YouTubePlayer;
import com.google.android.youtube.player.YouTubePlayerView;
import com.google.android.youtube.player.YouTubePlayer.Provider;


import java.io.IOException;

@SuppressLint("Registered")
public class YoutubeTrail extends YouTubeBaseActivity implements YouTubePlayer.OnInitializedListener {
    private static final int RECOVERY_REQUEST = 1;
    YouTubePlayerView youTubePlayerView;
    YouTubePlayer.OnInitializedListener onInitializedListener;
    private MyPlayerStateChangeListener playerStateChangeListener;
    private MyPlaybackEventListener playbackEventListener;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_youtube);
        playerStateChangeListener = new MyPlayerStateChangeListener();
        playbackEventListener = new MyPlaybackEventListener();
        youTubePlayerView = (YouTubePlayerView) findViewById(R.id.youtube_player_view);

        /*onInitializedListener = new YouTubePlayer.OnInitializedListener() {

            @Override
            public void onInitializationSuccess(YouTubePlayer.Provider provider, YouTubePlayer youTubePlayer, boolean b) {

            }

            @Override
            public void onInitializationFailure(YouTubePlayer.Provider provider, YouTubeInitializationResult youTubeInitializationResult) {

            }
        };*/
        youTubePlayerView.initialize(PlayerConfig.API_KEY, onInitializedListener);

    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == RECOVERY_REQUEST) {
            // Retry initialization if user performed a recovery action
            getYouTubePlayerProvider().initialize(PlayerConfig.API_KEY, this);
        }
    }

    protected Provider getYouTubePlayerProvider() {
        return youTubePlayerView;
    }

    private void showMessage(String message) {
        Toast.makeText(this, message, Toast.LENGTH_LONG).show();
    }

    @Override
    public void onInitializationSuccess(Provider provider, YouTubePlayer youTubePlayer, boolean b) {
        youTubePlayer.loadVideo("-72P_EFphSc");/*15qGHhFaWao*/
        youTubePlayer.play();
    }

    @Override
    public void onInitializationFailure(Provider provider, YouTubeInitializationResult youTubeInitializationResult) {

    }

    private final class MyPlaybackEventListener implements YouTubePlayer.PlaybackEventListener {

        @Override
        public void onPlaying() {
            // Called when playback starts, either due to user action or call to play().
            showMessage("Playing");
        }

        @Override
        public void onPaused() {
            // Called when playback is paused, either due to user action or call to pause().
            showMessage("Paused");
        }

        @Override
        public void onStopped() {
            // Called when playback stops for a reason other than being paused.
            showMessage("Stopped");
        }

        @Override
        public void onBuffering(boolean b) {
            // Called when buffering starts or ends.
        }

        @Override
        public void onSeekTo(int i) {
            // Called when a jump in playback position occurs, either
            // due to user scrubbing or call to seekRelativeMillis() or seekToMillis()
        }
    }

    private final class MyPlayerStateChangeListener implements YouTubePlayer.PlayerStateChangeListener {

        @Override
        public void onLoading() {
            // Called when the player is loading a video
            // At this point, it's not ready to accept commands affecting playback such as play() or pause()
        }

        @Override
        public void onLoaded(String s) {
            // Called when a video is done loading.
            // Playback methods such as play(), pause() or seekToMillis(int) may be called after this callback.
        }

        @Override
        public void onAdStarted() {
            // Called when playback of an advertisement starts.
        }

        @Override
        public void onVideoStarted() {
            // Called when playback of the video starts.
        }

        @Override
        public void onVideoEnded() {
            // Called when the video reaches its end.
        }

        @Override
        public void onError(YouTubePlayer.ErrorReason errorReason) {
            // Called when an error occurs.
        }
    }
}
_______________________________________________________________________________________________________________________________________
before adding pause==vv.getCurrantPos

package com.example.my_badminton;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.media.MediaPlayer;
import android.media.PlaybackParams;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.provider.Settings;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.MediaController;
import android.widget.Toast;
import android.widget.VideoView;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import java.io.IOException;

public class PlayVideo extends AppCompatActivity {
    static MediaPlayer mediaPlayer;
    String html = "<iframe width=\"560\" height=\"315\" src=\"http://www.youtube.com/watch?v=cRFnsOUoHmM\" frameborder=\"0\" allowfullscreen></iframe>\"";
    String url = "<iframe src='https://www.youtube.com/watch?v=cRFnsOUoHmM?fs=0' width='100%' height='100%' style='border: none;'></iframe>";
    int initPos, currPos, watchAgainCount, pauseAt = 0;
    Button watchAgain, answerQuestions;
    String link;
    MediaController mediaController;
    //    AnswersModel answersModel;
    Handler handler;
    Intent intent;
    int REQUEST_ANSWER = 1;
    //    DBHandler db;
    int pauses[] = {5, 6, 7};//9,19,29
    private boolean isReceiverRegistered = false;
    private VideoView vv;
    Runnable stopPlayerTask = new Runnable() {
        @Override
        public void run() {
            vv.pause();
            currPos = (vv.getCurrentPosition());/*(pauses[pauseAt])/11; vv.getCurrentPosition();*/
            Log.e("run: ", "stopped at sec " + vv.getCurrentPosition() + " currpos is " + currPos);
            buttonEnable();
            watchAgainCount = 0;


        }
    };
    final MediaPlayer.OnInfoListener onInfoToPlayStateListener = new MediaPlayer.OnInfoListener() {

        @Override
        public boolean onInfo(MediaPlayer mp, int what, int extra) {
            switch (what) {
                case MediaPlayer.MEDIA_INFO_VIDEO_RENDERING_START: {
                    Log.e("info", "MEDIA_INFO_VIDEO_RENDERING_START");
                    vv.seekTo(initPos);
                    vv.start();
                    buttonDisable();
                    autoPauseVideo(pauses[pauseAt], pauseAt);
                    return true;
                }
                case MediaPlayer.MEDIA_INFO_BUFFERING_START: {
                    Log.e("info", "MEDIA_INFO_BUFFERING_START");

                    return true;
                }
                case MediaPlayer.MEDIA_INFO_BUFFERING_END: {
                    Log.e("info", "MEDIA_INFO_BUFFERING_END");


                    return true;
                }
            }
            return false;
        }
    };
    private BroadcastReceiver receiver = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            NetworkInfo info = getNetworkInfo(context);
            if (info != null && info.isConnected()) {
                //Todo code to execute if wifi connected
            } else {                  //Todo code to execute if wifi disconnected
            }
        }
    };
    private String shotLoc, shotType;
    private boolean shdStop = false;

    private void buttonEnable() {
        watchAgain.setVisibility(View.VISIBLE);
        answerQuestions.setVisibility(View.VISIBLE);
    }

    private void showQuestions() {
        intent = new Intent(this, SubmitAnswer.class);

        new AlertDialog.Builder(this)
                .setTitle("Answer the question")
                .setMessage("Q1.xxxxx?")
                .setIcon(android.R.drawable.ic_dialog_info)
                .setPositiveButton("ans", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        startActivityForResult(intent, REQUEST_ANSWER);
                       /* initPos = currPos;
                        vv.seekTo(initPos);
                        vv.start();
                        buttonDisable();
//                        answerQuestions.setEnabled(false);
                        autoPauseVideo();*/
                    }
                }).show();
    }

    private void buttonDisable() {
        watchAgain.setVisibility(View.GONE);
        answerQuestions.setVisibility(View.GONE);
    }

    @SuppressLint("SetJavaScriptEnabled")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_paly_video);
        vv = (VideoView) findViewById(R.id.video_view);
//        db=new DBHandler(this);
        watchAgain = findViewById(R.id.watch_again);
        answerQuestions = findViewById(R.id.answer_questions);
        link = "http://stage1.optipacetech.com/badminton/videos/counting.mp4";
        handler = new Handler();

/*        if (isConnectingToInternet(this)) {
//            onStart();
            try {
                mediaController = new MediaController(this);
                mediaController.setAnchorView(vv);
                Uri video = Uri.parse(link);
                vv.setMediaController(null);
                vv.setVideoURI(video);
                vv.start();
                autoPauseVideo();


            } catch (Exception e) {
                // TODO: handle exception
                Toast.makeText(this, "Error connecting", Toast.LENGTH_SHORT).show();
            }
        } else {
//            enableWifi();

        }*/


//        watchAgain.setEnabled(false);
//        answerQuestions.setEnabled(false);


    }

    private void autoPauseVideo(final int pauseAt, int nonTimer) {
        //to stop on media player
/*while(vv.getCurrentPosition()==pauseAt)
            Toast.makeText(this, "stopHere!!!", Toast.LENGTH_SHORT).show();
            vv.pause();
            currPos = vv.getCurrentPosition();
            buttonEnable();
            watchAgainCount = 0;
        }*/
        Log.e("autoPauseVideo:", " timer " + pauseAt + "\n video time " + nonTimer);
        handler.postDelayed(stopPlayerTask, pauseAt /*+ (secondsCompleted+1000)*/);//pauses at 9 secs
       /* new Thread(new Runnable() {
            @Override
            public void run() {
                while(!shdStop)
                if (vv.getCurrentPosition() >= pauseAt) {
                    vv.stopPlayback();
                    shdStop=true;
                    currPos = vv.getCurrentPosition();
//                    buttonEnable();
                    watchAgainCount = 0;
                }
            }
        }).start();*/
    }

    public void answerQuestions(View view) {
        showQuestions();
    }

    public void watchAgain(View view) {
//        if (answerFlag == 0)
        if (watchAgainCount == 0) {
            watchAgainCount++;

            vv.seekTo(initPos);
//        else
//        vv.seekTo(currPos);

            vv.start();
//            answerQuestions.setEnabled(false);
            buttonDisable();
            autoPauseVideo(pauses[pauseAt], pauseAt);
        } else {
            Toast.makeText(this, "please wait!!", Toast.LENGTH_SHORT).show();
        }
    }

    private boolean isConnectingToInternet(Context applicationContext) {
        Runtime runtime = Runtime.getRuntime();
        try {
            Process mIpAddrProcess = runtime.exec("/system/bin/ping -c 1 8.8.8.8");
            int mExitValue = mIpAddrProcess.waitFor();
            System.out.println(" mExitValue " + mExitValue);
            if (mExitValue == 0) {
                return true;
            } else {
                return false;
            }
        } catch (InterruptedException ignore) {
            ignore.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    @Override
    protected void onStart() {

        super.onStart();
        if (isConnectingToInternet(this))
            try {
                mediaController = new MediaController(this);
                mediaController.setAnchorView(vv);
                Uri video = Uri.parse(link);
                vv.setMediaController(mediaController);

                vv.setVideoURI(video);
                Log.e("onPrepared11: ", "pauses[pauseAt] " + pauses[pauseAt] + " pauseAt " + pauseAt + "initpos" + initPos);
                vv.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
                    @Override
                    public void onPrepared(MediaPlayer mp) {
                        PlaybackParams myPlayBackParams = null;
                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {
                            myPlayBackParams = new PlaybackParams();
                            myPlayBackParams.setSpeed(0.2f); //you can set speed here
                            mp.setPlaybackParams(myPlayBackParams);
                            vv.setOnInfoListener(onInfoToPlayStateListener);
                            /*if (vv.requestFocus()) {
                                vv.seekTo(initPos);
                                vv.start();
                                buttonDisable();
                                autoPauseVideo(pauses[pauseAt], pauseAt);

                            }*/
                            //mp.seekTo(initPos);
                        }


                        Log.e("onPrepared22: ", "pauses[pauseAt] " + pauses[pauseAt] + " pauseAt " + pauseAt + "initpos" + initPos);

                    }
                });

                //vv.seekTo(initPos);
                //vv.start();
                //buttonDisable();


            } catch (Exception e) {
                // TODO: handle exception
                Toast.makeText(this, "Error connecting", Toast.LENGTH_SHORT).show();
            }
        else {
            Toast.makeText(this, "No Network", Toast.LENGTH_SHORT).show();
//            registerReceiver(receiver, new IntentFilter("android.net.conn.CONNECTIVITY_CHANGE"));

            enableWifi();
        }
    }

    private void enableWifi() {
        AlertDialog.Builder alertDialog = new AlertDialog.Builder(
                this);
        alertDialog.setTitle("Confirm...");
        alertDialog.setMessage("Do you want to go to wifi settings?");
        alertDialog.setPositiveButton("yes",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        startActivity(new Intent(Settings.ACTION_WIFI_SETTINGS));
                    }
                });
        alertDialog.setNegativeButton("no",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.cancel();
                    }
                });
        alertDialog.show();
    }

    @Override
    protected void onPause() {
        super.onPause();
        buttonDisable();
        handler.removeCallbacks(stopPlayerTask);
        if (isReceiverRegistered) {
            isReceiverRegistered = false;
            unregisterReceiver(receiver);
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
//        registerReceiver(receiver, new IntentFilter("android.net.conn.CONNECTIVITY_CHANGE"));
        if (!isReceiverRegistered) {
            isReceiverRegistered = true;
            registerReceiver(receiver, new IntentFilter("android.net.wifi.STATE_CHANGE"));
            vv.resume();
        }
    }

    private NetworkInfo getNetworkInfo(Context context) {
        ConnectivityManager connManager = (ConnectivityManager)
                context.getSystemService(Context.CONNECTIVITY_SERVICE);
        return connManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == REQUEST_ANSWER) {
            if (resultCode == Activity.RESULT_OK) {
                final Bundle bundle = data.getExtras();
                shotLoc = (String) bundle.get("shot_location");
                shotType = (String) bundle.get("shot_type");
//                db.saveAnswers(shotLoc,shotType);
                Log.e("type and loc", "onActivityResult: " + shotLoc + "\n" + shotType);

                /*answersModel.setShotLocation((String) bundle.get("shot_location"));
                answersModel.setShotType((String) bundle.get("shot_type"));*/


                    /*Intent intent;
                    intent = new Intent(SwipeCard.this, OnlineTransActivity.class);
                    intent.putExtras(bundle);
                    startActivity(intent);*/
                Log.e("onActivityResult0", "curr pos " + currPos + "\n init pos " + initPos);

                if (!(pauseAt > pauses.length)) {
                    Log.e("onActivityResult1", "curr pos " + currPos + "\n init pos " + initPos);
                    initPos = currPos;
                    pauseAt = pauseAt + 1;
                    Log.e("onActivityResult2", "curr pos " + currPos + "\n init pos " + initPos);


                    // below code is useless coz after activity result it goes to onstart() which has below code.

                   /* vv.seekTo(initPos);
//                    vv.start();
                    buttonDisable();
                    try {
                        autoPauseVideo(pauses[pauseAt++]);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        e.printStackTrace();
                    }*/
                }

                vv.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                    @Override
                    public void onCompletion(MediaPlayer mp) {
                        Log.e("redirecting", "to view answer");
                        startActivity(new Intent(getApplication(), ViewAnswers.class).putExtras(bundle));

                    }
                });

            }


        } else {
            Toast.makeText(getApplicationContext(), "Answer is not submitted", Toast.LENGTH_SHORT).show();
        }
    }

}
___________________________________________________________________________________________________________________________________________________
29/01/2020
try this for progress bar position
@Override
public void run() {
    // TODO Auto-generated method stub

    try {
        while (mp != null) {
            int currentPosition = mp.getCurrentPosition();
            Message msg = new Message();
            msg.what = currentPosition;
            threadHandler.sendMessage(msg);

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
                System.out.println("interrupt exeption" + e);
            }
        }
    }

    catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        System.out.println("My exeption" + e);
    } 
}


when handlerTime = handlerTime + 10 
the values are 
E/run:: current pos 0
E/info: MEDIA_INFO_VIDEO_RENDERING_START
E/run:: current pos 26
E/run:: current pos 33
E/run:: current pos 41
E/run:: current pos 51
E/run:: current pos 63
E/run:: current pos 78
I/zygote64: Do partial code cache collection, code=61KB, data=46KB
I/zygote64: After code cache collection, code=61KB, data=46KB
    Increasing code cache capacity to 256KB
E/run:: current pos 94
E/run:: current pos 113
E/run:: current pos 133
E/run:: current pos 156
E/run:: current pos 180
E/run:: current pos 209
E/run:: current pos 238
E/run:: current pos 287
E/run:: current pos 320
W/Adreno-ES20: <core_glFinish:34>: glFinish skipped: 0
W/Adreno-ES20: <core_glFinish:34>: glFinish skipped: 0
E/run:: current pos 354
E/run:: current pos 391
E/run:: current pos 429
E/run:: current pos 470
E/run:: current pos 512
E/run:: current pos 557
E/run:: current pos 603
E/run:: current pos 652
I/zygote64: Do full code cache collection, code=124KB, data=94KB
I/zygote64: After code cache collection, code=96KB, data=65KB
E/run:: current pos 703
E/run:: current pos 755
E/run:: current pos 810
E/run:: current pos 866
E/run:: current pos 924
E/run:: current pos 985
E/run:: current pos 1047
E/run:: current pos 1125
E/run:: current pos 1191
E/run:: current pos 1260
E/run:: current pos 1330
E/run:: current pos 1403
E/run:: current pos 1477
E/run:: current pos 1553
E/run:: current pos 1632
E/run:: current pos 1712
E/run:: current pos 1795
E/run:: current pos 1854
E/run:: current pos 1941
E/run:: current pos 2030
E/run:: current pos 2120
E/run:: current pos 2213
E/run:: current pos 2307
E/run:: current pos 2419
E/run:: current pos 2518
E/run:: current pos 2618
W/Adreno-EGL: <qeglDrvAPI_eglGetConfigAttrib:612>: EGL_BAD_ATTRIBUTE
D/vndksupport: Loading /vendor/lib64/hw/gralloc.msm8937.so from current namespace instead of sphal namespace.
E/run:: current pos 2721
I/zygote64: Do partial code cache collection, code=123KB, data=89KB
    After code cache collection, code=123KB, data=89KB
    Increasing code cache capacity to 512KB
E/run:: current pos 2825
E/run:: current pos 2932
E/run:: current pos 3041
E/run:: current pos 3152
W/Adreno-ES20: <core_glFinish:34>: glFinish skipped: 0
W/Adreno-ES20: <core_glFinish:34>: glFinish skipped: 0
E/run:: current pos 3247
E/run:: current pos 3362
E/run:: current pos 3466
E/run:: current pos 3585
E/run:: current pos 3705
E/run:: current pos 3828
E/run:: current pos 3974
E/run:: current pos 4100
E/run:: current pos 4216
I/zygote64: Compiler allocated 6MB to compile void android.view.ViewRootImpl.performTraversals()
E/run:: current pos 4346
E/run:: current pos 4479
E/run:: current pos 4613
E/run:: current pos 4736
E/run:: current pos 4875
E/run:: current pos 5017
E/run:: current pos 5159
E/run:: current pos 5319
E/run:: current pos 5465
E/run:: current pos 5603
E/run:: current pos 5754
E/run:: current pos 5906
E/run:: current pos 6042
E/run:: current pos 6199
E/run:: current pos 6346
E/run:: current pos 6507
E/run:: current pos 6703
E/run:: current pos 6867
E/run:: current pos 7034
E/run:: current pos 7183
E/run:: current pos 7354
E/run:: current pos 7527
E/run:: current pos 7702
E/run:: current pos 7867
E/run:: current pos 8045
E/run:: current pos 8212
E/run:: current pos 8399
_________________________________
when handlerTime = handlerTime + 100
E/run:: current pos 0
W/MediaPlayerNative: info/warning (3, 0)
E/info: MEDIA_INFO_VIDEO_RENDERING_START
E/run:: current pos 51
E/run:: current pos 112
E/run:: current pos 192
E/run:: current pos 302
I/zygote64: Do partial code cache collection, code=58KB, data=47KB
I/zygote64: After code cache collection, code=58KB, data=47KB
    Increasing code cache capacity to 256KB
E/run:: current pos 422
E/run:: current pos 563
W/Adreno-ES20: <core_glFinish:34>: glFinish skipped: 0
W/Adreno-ES20: <core_glFinish:34>: glFinish skipped: 0
E/run:: current pos 723
E/run:: current pos 904
E/run:: current pos 1091
E/run:: current pos 1312
E/run:: current pos 1540
E/run:: current pos 1801
E/run:: current pos 2101
E/run:: current pos 2386
E/run:: current pos 2707
E/run:: current pos 3048
E/run:: current pos 3392
E/run:: current pos 3795
E/run:: current pos 4195
E/run:: current pos 4594
E/run:: current pos 5048
E/run:: current pos 5508
I/zygote64: Do full code cache collection, code=123KB, data=88KB
I/zygote64: After code cache collection, code=97KB, data=64KB
E/run:: current pos 5970
E/run:: current pos 6480
____________________________________________
when handlerTime = handlerTime + 1
E/run:: current pos 0
E/run:: current pos 89
E/run:: current pos 100
E/run:: current pos 107
E/run:: current pos 114
E/run:: current pos 126
W/MediaPlayerNative: info/warning (3, 0)
E/run:: current pos 147
E/info: MEDIA_INFO_VIDEO_RENDERING_START
E/run:: current pos 156
I/zygote64: Do partial code cache collection, code=60KB, data=46KB
I/zygote64: After code cache collection, code=60KB, data=46KB
    Increasing code cache capacity to 256KB
E/run:: current pos 170
E/run:: current pos 178
E/run:: current pos 183
E/run:: current pos 195
E/run:: current pos 205
E/run:: current pos 213
E/run:: current pos 218
E/run:: current pos 224
E/run:: current pos 231
E/run:: current pos 238
E/run:: current pos 246
E/run:: current pos 254
E/run:: current pos 265
E/run:: current pos 279
E/run:: current pos 289
E/run:: current pos 301
E/run:: current pos 307
I/zygote64: Do full code cache collection, code=124KB, data=94KB
I/zygote64: After code cache collection, code=92KB, data=62KB
E/run:: current pos 313
E/run:: current pos 320
E/run:: current pos 327
E/run:: current pos 333
E/run:: current pos 340
E/run:: current pos 290
E/run:: current pos 297
E/run:: current pos 304
E/run:: current pos 311
E/run:: current pos 320
E/run:: current pos 328
E/run:: current pos 337
E/run:: current pos 345
E/run:: current pos 353
E/run:: current pos 362
E/run:: current pos 372
E/run:: current pos 381
E/run:: current pos 390
E/run:: current pos 399
E/run:: current pos 409
if want to pause, increase the remaining time by counting the time paused and add.
______________________________________________________________________________________________________________________________________________
30/01/2020
 the pauses are{
0.16692996423721312(),0.7987609985694886
1.7136649866485596, 2.1010930276565554
3.4260490295639037,4.04645494802475
5.262332974250794,5.753871975681305
7.0304789957084655,7.969838037670136
8.617399953269958,9.336854976158142
10.425100980926514,10.86966297329712
_________________________________________________________________________________________________________________________________________________
vv.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
                    @Override
                    public void onPrepared(MediaPlayer mp) {
                        int current, tempCurr, duration;
                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {

                            myPlayBackParams.setSpeed(0.2f); //you can set speed here
                            mp.setPlaybackParams(myPlayBackParams);
                            vv.setOnInfoListener(onInfoToPlayStateListener);
                            handler.postDelayed(stopPlayerTask, handlerTime);

                        }
                    }
                });

_________________________________________________________________________________________________________________________________________________
31/01/2020
1.fine pausing at first 	
2.mp.setPlayback play the video automatically..
test codes are written in new download file
__________________________________________________________________________________________________________________________________________________
03/02/2020
perfectly working(pausing )
package com.example.my_badminton;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.media.MediaPlayer;
import android.media.PlaybackParams;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Parcelable;
import android.os.PersistableBundle;
import android.provider.Settings;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.MediaController;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.VideoView;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;

import java.io.IOException;

@RequiresApi(api = Build.VERSION_CODES.O)
public class PlayVideo extends AppCompatActivity {
    static MediaPlayer mediaPlayer;
    final MediaPlayer.OnInfoListener onInfoToPlayStateListener = new MediaPlayer.OnInfoListener() {

        @Override
        public boolean onInfo(MediaPlayer mp, int what, int extra) {
            switch (what) {
                case MediaPlayer.MEDIA_INFO_VIDEO_RENDERING_START: {
                    Log.e("info", "MEDIA_INFO_VIDEO_RENDERING_START");
                    /*vv.seekTo(initPos);
                    vv.start();
                    buttonDisable();
                    autoPauseVideo(pauses[pauseAt], pauseAt);*/
                    return true;
                }
                case MediaPlayer.MEDIA_INFO_BUFFERING_START: {
                    Log.e("info", "MEDIA_INFO_BUFFERING_START");

                    return true;
                }
                case MediaPlayer.MEDIA_INFO_BUFFERING_END: {
                    Log.e("info", "MEDIA_INFO_BUFFERING_END");


                    return true;
                }
            }
            return false;
        }
    };
    String html = "<iframe width=\"560\" height=\"315\" src=\"http://www.youtube.com/watch?v=cRFnsOUoHmM\" frameborder=\"0\" allowfullscreen></iframe>\"";
    String url = "<iframe src='https://www.youtube.com/watch?v=cRFnsOUoHmM?fs=0' width='100%' height='100%' style='border: none;'></iframe>";
    int initPos, currPos, watchAgainCount, pauseAt, REQUEST_ANSWER = 1, answerCount;
    Button watchAgain, answerQuestions;
    String link;
    MediaController mediaController;
    Bundle bundle = new Bundle();
    TextView ctv;
    //    AnswersModel answersModel;
    Handler handler;
    Intent intent;
    //    DBHandler db;\
    int[] pauses = {166, 798, 1713, 2101, 3426, 4046, 5262, 5753, 7030, 7969, 8617, 9336, 10425, 10869};
    //    String[] pauses = {"0166", "0798","1713", "2101", "3426", "4046", "5262", "5753", "7030", "7969", "8617", "9336", "10425", "10869"};
    int handlerTime = 0, remainingTime = 500000;
    String sCurrPos = "";
    private boolean isReceiverRegistered = false;
    private VideoView vv;
    Runnable stopPlayerTask = new Runnable() {
        @Override
        public void run() {
            remainingTime = remainingTime - handlerTime;
            sCurrPos = String.valueOf(currPos = (vv.getCurrentPosition()));/*(pauses[pauseAt])/11; vv.getCurrentPosition();*/
            /*if (sCurrPos.length() == 3) { // assuming that the first pause will be after 100th sec so ==3
                sCurrPos = "0" + sCurrPos;// append 0 so that it matches with given pause time
                Log.e("run: ", "String current pos subString " + sCurrPos.substring(0, 3) + " pause[] value " + pauses[pauseAt].substring(0, 3));
            }*/
            if (pauses[pauseAt] <= currPos)/*sCurrPos.length() >= 4 && sCurrPos.substring(0, 3).equals(pauses[pauseAt].substring(0, 3))*/ {
                Log.e("run: ", "String current pos subString " + sCurrPos + " pause[] value " + pauses[pauseAt] + "media Player " + mediaPlayer);
                mediaPlayer.pause();
//                vv.pause();
                buttonEnable();
                watchAgainCount = 0;
            }

            ctv.setText(sCurrPos);

            if (remainingTime > 0 && vv.isPlaying()) {
                handler.postDelayed(stopPlayerTask, handlerTime = handlerTime + 1);
            }

        }
    };
    private BroadcastReceiver receiver = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            NetworkInfo info = getNetworkInfo(context);
            if (info != null && info.isConnected()) {
                //Todo code to execute if wifi connected
            } else {                  //Todo code to execute if wifi disconnected
            }
        }
    };
    private String shotLoc, shotType;
    private boolean shdStop = false;

    private void buttonEnable() {
        watchAgain.setVisibility(View.VISIBLE);
        answerQuestions.setVisibility(View.VISIBLE);
    }

    private void showQuestions() {
        intent = new Intent(this, SubmitAnswer.class);

        new AlertDialog.Builder(this)
                .setTitle("Answer the question")
                .setMessage("Q1.xxxxx?")
                .setIcon(android.R.drawable.ic_dialog_info)
                .setPositiveButton("ans", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        startActivityForResult(intent, REQUEST_ANSWER);
                    }
                }).show();
    }

    private void buttonDisable() {
        watchAgain.setVisibility(View.GONE);
        answerQuestions.setVisibility(View.GONE);
    }

    @SuppressLint("SetJavaScriptEnabled")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_paly_video);
        vv = (VideoView) findViewById(R.id.video_view);
        ctv = findViewById(R.id.count_down);
//        db=new DBHandler(this);
        watchAgain = findViewById(R.id.watch_again);
        answerQuestions = findViewById(R.id.answer_questions);
        link = "http://stage1.optipacetech.com/badminton/videos/training.mp4";
//        link = "android.resource://" + getPackageName() + "/" + R.raw.training;
        handler = new Handler();

        if (isConnectingToInternet(this))
            try {
                if (mediaController == null) {
                    mediaController = new MediaController(this);
                }
                mediaController.setAnchorView(vv);
                Uri video = Uri.parse(link);
                vv.setMediaController(null);

                vv.setVideoURI(video);
//                vv.seekTo(initPos);
//                vv.start();
                buttonDisable();
//                while (vv.getCurrentPosition() == pauses[pauseAt] * 1000) {
//                autoPauseVideo(pauses[pauseAt], pauseAt);
//                }

                Log.e("onPrepared11: ", "pauses[pauseAt] " + pauses[pauseAt] + " pauseAt " + pauseAt + "initpos" + initPos + "answercount");
                vv.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
                    @RequiresApi(api = Build.VERSION_CODES.O)
                    @Override
                    public void onPrepared(MediaPlayer mp) {
                        mediaPlayer = mp;
                        int current, tempCurr, duration;
                        PlaybackParams myPlayBackParams = null;
                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {
                            myPlayBackParams = new PlaybackParams();
                            myPlayBackParams.setSpeed(0.2f); //you can set speed here

//                            if (answerCount == 0) {
                            mp.setPlaybackParams(myPlayBackParams);
//                            }
                            mp.seekTo(initPos, MediaPlayer.SEEK_CLOSEST);
                            mp.start();
                            vv.setOnInfoListener(onInfoToPlayStateListener);
                            handler.postDelayed(stopPlayerTask, handlerTime);
                            /*vv.seekTo(initPos);
                            vv.start();*/
                            buttonDisable();

                        }
                        Log.e("onPrepared22: ", "pauses[pauseAt] " + pauses[pauseAt] + " pauseAt " + pauseAt + "initpos" + initPos);
                    }
                });
            } catch (Exception e) {
                // TODO: handle exception
                Toast.makeText(this, "Error connecting", Toast.LENGTH_SHORT).show();
            }
        else {
            Toast.makeText(this, "No Network", Toast.LENGTH_SHORT).show();
//            registerReceiver(receiver, new IntentFilter("android.net.conn.CONNECTIVITY_CHANGE"));

            enableWifi();
        }
    }

    private void autoPauseVideo(final int pauseAt, int nonTimer) {
        //to stop on media player
/*while(vv.getCurrentPosition()==pauseAt)
            Toast.makeText(this, "stopHere!!!", Toast.LENGTH_SHORT).show();*/
        vv.pause();
        currPos = vv.getCurrentPosition();
        buttonEnable();
        watchAgainCount = 0;

        Log.e("autoPauseVideo:", " timer " + pauseAt + "\n video time " + nonTimer);
//        handler.postDelayed(stopPlayerTask, vv.getCurrentPosition()/*+ (secondsCompleted+1000)*/);//pauses at 9 secs
//        handler.post(stopPlayerTask);
    }

    @Override
    protected void onSaveInstanceState(@NonNull Bundle savedInstanceState) {
        super.onSaveInstanceState(savedInstanceState);
        savedInstanceState.putInt("Position", pauses[pauseAt]);// coz this is where we want the video to get paused.
    }

    @Override
    protected void onRestoreInstanceState(@NonNull Bundle savedInstanceState) {
        super.onRestoreInstanceState(savedInstanceState);
        currPos = savedInstanceState.getInt("Position");
        vv.seekTo(currPos);
    }

    @Override
    public void onRestoreInstanceState(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
        super.onRestoreInstanceState(savedInstanceState, persistentState);
        currPos = savedInstanceState.getInt("Position");
        vv.seekTo(currPos);
    }

    @RequiresApi(api = Build.VERSION_CODES.O)
    public void answerQuestions(View view) {
        // testing.. this view is acted as play button
        /*if (!(pauseAt > pauses.length)) {
            initPos = currPos;
            pauseAt = pauseAt + 1;
            Log.e("answerButton pressed", " init pos is " + initPos);
            vv.requestFocus();
//            mediaPlayer.start();
            mediaPlayer.seekTo(initPos,MediaPlayer.SEEK_CLOSEST);
            mediaPlayer.setOnSeekCompleteListener(new MediaPlayer.OnSeekCompleteListener() {
                @Override
                public void onSeekComplete(MediaPlayer mp) {
                    mediaPlayer.start();
                }
            });
*//*
            vv.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
                @Override
                public void onPrepared(MediaPlayer mp) {
                    mp.setOnSeekCompleteListener(new MediaPlayer.OnSeekCompleteListener() {
                        @Override
                        public void onSeekComplete(MediaPlayer mp) {
                            vv.seekTo(initPos);
                            vv.start();
                            Log.e("answerButton pressed", " onprepared " + initPos);

                        }
                    });



                }
            });
*//*
            buttonDisable();
            handler.postDelayed(stopPlayerTask, handlerTime);

        }*/
        showQuestions();
    }

    public void watchAgain(View view) {
//        if (answerFlag == 0)
        if (watchAgainCount == 0) {
            watchAgainCount++;

            mediaPlayer.seekTo(initPos, MediaPlayer.SEEK_CLOSEST);
            vv.seekTo(initPos);
//        else
//        vv.seekTo(currPos);

            vv.start();
//            answerQuestions.setEnabled(false);
            buttonDisable();
//            autoPauseVideo(pauses[pauseAt], pauseAt);
        } else {
            Toast.makeText(this, "please wait!!", Toast.LENGTH_SHORT).show();
        }
    }

    private boolean isConnectingToInternet(Context applicationContext) {
        Runtime runtime = Runtime.getRuntime();
        try {
            Process mIpAddrProcess = runtime.exec("/system/bin/ping -c 1 8.8.8.8");
            int mExitValue = mIpAddrProcess.waitFor();
            System.out.println(" mExitValue " + mExitValue);
            if (mExitValue == 0) {
                return true;
            } else {
                return false;
            }
        } catch (InterruptedException ignore) {
            ignore.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    @Override
    protected void onStart() {

        super.onStart();

    }

    private void enableWifi() {
        AlertDialog.Builder alertDialog = new AlertDialog.Builder(
                this);
        alertDialog.setTitle("Confirm...");
        alertDialog.setMessage("Do you want to go to wifi settings?");
        alertDialog.setPositiveButton("yes",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        startActivity(new Intent(Settings.ACTION_WIFI_SETTINGS));
                    }
                });
        alertDialog.setNegativeButton("no",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.cancel();
                    }
                });
        alertDialog.show();
    }

    @Override
    protected void onPause() {
        super.onPause();
        buttonDisable();
        handler.removeCallbacks(stopPlayerTask);
        if (isReceiverRegistered) {
            isReceiverRegistered = false;
            unregisterReceiver(receiver);
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
//        registerReceiver(receiver, new IntentFilter("android.net.conn.CONNECTIVITY_CHANGE"));
        if (!isReceiverRegistered) {
            isReceiverRegistered = true;
            registerReceiver(receiver, new IntentFilter("android.net.wifi.STATE_CHANGE"));
            vv.resume();
        }
    }

    private NetworkInfo getNetworkInfo(Context context) {
        ConnectivityManager connManager = (ConnectivityManager)
                context.getSystemService(Context.CONNECTIVITY_SERVICE);
        return connManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == REQUEST_ANSWER) {
            if (resultCode == Activity.RESULT_OK) {
                final Bundle bundle = data.getExtras();
                shotLoc = (String) bundle.get("shot_location");
                shotType = (String) bundle.get("shot_type");
//                db.saveAnswers(shotLoc,shotType);
                Log.e("type and loc", "onActivityResult: " + shotLoc + "\n" + shotType);

                /*answersModel.setShotLocation((String) bundle.get("shot_location"));
                answersModel.setShotType((String) bundle.get("shot_type"));*/


                    /*Intent intent;
                    intent = new Intent(SwipeCard.this, OnlineTransActivity.class);
                    intent.putExtras(bundle);
                    startActivity(intent);*/
                Log.e("onActivityResult0", "curr pos " + currPos + "\n init pos " + initPos);

                if (!(pauseAt > pauses.length)) {
                    Log.e("onActivityResult1", "curr pos " + currPos + "\n init pos " + initPos);
                    initPos = currPos;
                    pauseAt = pauseAt + 1;
                    answerCount++;
                    Log.e("onActivityResult2", "curr pos " + currPos + "\n init pos " + initPos);


                    // below code is useless coz after activity result it goes to onstart() which has below code.

                   /* vv.seekTo(initPos);
//                    vv.start();
                    buttonDisable();
                    try {
                        autoPauseVideo(pauses[pauseAt++]);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        e.printStackTrace();
                    }*/
                }

                vv.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                    @Override
                    public void onCompletion(MediaPlayer mp) {
                        Log.e("redirecting", "to view answer");
                        startActivity(new Intent(getApplication(), ViewAnswers.class).putExtras(bundle));

                    }
                });

            }


        } else {
            Toast.makeText(getApplicationContext(), "Answer is not submitted", Toast.LENGTH_SHORT).show();
        }
    }

}

2. on finish of video (one session) send the answer to the server.
3.POINTS TO BE NOTED is saved in mail
4. ListOfAnswers to be done..

07/02/2020
1.left out modules
a.total time to answer the questions.
b.total score.

10/02/2020
1. change the button style..
2. after adding progress bar, sometimes the video starts from first.(testing)--resolved, but again the handler is called..
3. add progress bar in the onInfoToPlayStateListener().---not helping

tested styles
1. Widget.AppCompat.Button.Colored

button style and background theme


17/02/2020

1.download_answer.php pending
2. answer validation.pending
3.upload answer and score.pending
4. cant play this video when server is not reachable.handle this.
5. try mvc architecture.


19/02/2020
1. the data is not getting posting. 404 error.

20/02/2020
1.fetch pauses from playvideo.


25/02/2020
1.time calculation per question-done.
2.button on court- partially done.
3. Total score calculation -pending
4 Total duration taken to answer -done
5.onClickListener of custom adapter shd show the video clip-- pending

26/02/2020
1. set text in view answers for total answers.

02/03/2020

SELECT PAUSES  FROM PAUSES_TABLE WHERE PID IN(2,3)
1. 	review the video fot the slot.-done
2. stop at last pause---- pending(if non related video part, then clip the video by admin)  
3. mp throws exception illegal state exception--pending
4. review for 0th item crashing-- done
5. if crashes then  the listview is not shown, save the answers in db.	-- done
6. display myanswers in a dialog.--done


04/03/2020
1. set flag after game was completed.---pending
2. able CORRECT_ANSWER has no column named PAUSES --done
CREATE TABLE IF NOT EXISTS CORRECT_ANSWER(AID INTEGER PRIMARY KEY,SHOT_TYPE TEXT,SHOT_LOCTION TEXT,PAUSES NUMBER,SERVER_TIME NUMBER)----done
3. correct asnwer stores the value everytime the app is launched (checking if table is empty)--done
check whether the table is emplty, if yes then add the data into table----done
4.score validation in geanswerImpl-done

6/03/2020
5. doesnt play video when network is off, after turning on also doesnt play, write networkListener --pending
6. correct answer values are storeed in the database with a space-- make changes in pause.php---pending

09/03/2020
1.score calculation for type, loc,time each 1 point
2. sync to server-- pending
3. formed the xml in db handler. access the return value

example
{
    "name": "sample",
    "def": [
        {
            "setId": 1,
            "setDef": [
                {
                    "name": "ABC",
                    "type": "STRING"
                },
                {
                    "name": "XYZ",
                    "type": "STRING"
                }
            ]
        },
        {
            "setId": 2,
            "setDef": [
                {
                    "name": "abc",
                    "type": "STRING"
                },
                {
                    "name": "xyz",
                    "type": "STRING"
                }
            ]
        }
    ]
}

JSONObject object = new JSONObject();
object.put("name", "sample");
JSONArray array = new JSONArray();

JSONObject arrayElementOne = new JSONObject();
arrayElementOne.put("setId", 1);
JSONArray arrayElementOneArray = new JSONArray();

JSONObject arrayElementOneArrayElementOne = new JSONObject();
arrayElementOneArrayElementOne.put("name", "ABC");
arrayElementOneArrayElementOne.put("type", "STRING");

JSONObject arrayElementOneArrayElementTwo = new JSONObject();
arrayElementOneArrayElementTwo.put("name", "XYZ");
arrayElementOneArrayElementTwo.put("type", "STRING");

arrayElementOneArray.put(arrayElementOneArrayElementOne);
arrayElementOneArray.put(arrayElementOneArrayElementTwo);

arrayElementOne.put("setDef", arrayElementOneArray);
array.put(arrayElementOne);
object.put("def", array);

10/03/2020
1. while fetching the answer get the video name also to stream the video----pending
2.php for uploading the player data..

11/03/2020
1. download correct answer result ---
	678:Top Middle:Push:240:10,678:Middle middle:Drive:602:12 ----------- server result 
	1:678:Top Middle:0:240:10:,2:678:Middle middle:0:602:12:, ----------app result
2. xml formed and sent to server 

<player_record>
<selection>
<shot_type>Push</shot_type>
<shot_location>Top middle</shot_location>
<time>14</time>
<score>2</score>
<vid>678</vid></selection>

<selection>
<shot_type>Drive</shot_type>
<shot_location>Middle middle</shot_location>
<time>13</time>	
<score>2</score>
<vid>678</vid></selection>

<selection>
<shot_type>Drive</shot_type>
<shot_location>Top middle</shot_location>
<time>7</time>
<score>1</score>
<vid>678</vid></selection>

<selection>
<shot_type>Drive</shot_type>
<shot_location>Middle middle</shot_location>
<time>9</time>
<score>3</score>
<vid>678</vid></selection>

<selection>
<shot_type>Push</shot_type>
<shot_location>Top middle</shot_location>
<time>10</time>
<score>3</score>
<vid>678</vid></selection>

<selection>
<shot_type>Drive</shot_type>
<shot_location>Middle middle</shot_location>
<time>11</time>
<score>3</score>
<vid>678</vid></selection>

<selection>
<shot_type>Push</shot_type>
<shot_location>Top middle</shot_location>
<time>19</time>
<score>2</score>
<vid>678</vid></selection>

<selection>
<shot_type>Drive</shot_type>
<shot_location>Middle middle</shot_location>
<time>11</time>
<score>3</score>
<vid>678</vid></selection>

<total_time>94</total_time>
<total_score>19</total_score>
<pid>047</pid>
</player_record>


null1:Push:Top Middle:240:10:678:,2:Drive:Middle middle:602:12:678:,

2. clear the sqlite soon after syncing to serve-- pending

java.lang.RuntimeException: Failure delivering result ResultInfo{who=null, request=1, result=-1, data=Intent { (has extras) }} to activity {com.example.my_badminton/com.example.my_badminton.PlayVideo}: java.lang.NullPointerException: Attempt to invoke virtual method 'boolean java.lang.String.equalsIgnoreCase(java.lang.String)' on a null object reference

3.



<selection%d>
<shot_type>%s</shot_type>
<shot_location>%s</shot_location>
<time>%s</time>
<score>%s</score>
</selection%s>

12/03/2020
1. pid in xml is hardcoded, shd be fetched from db or server.
2. to get the video id by sending the u_id
to get the vid which are not viewed by the u_id--->SELECT DISTINCT `V_ID` FROM `ANSWERS` WHERE `V_ID` NOT IN(select `V_ID` from USER_LOG WHERE U_ID=1) order by RAND() limit 1 
to get the pauses for the above query---->SELECT * FROM `ANSWERS` WHERE `V_ID` = (SELECT DISTINCT `V_ID` FROM `ANSWERS` WHERE `V_ID` NOT IN(select `V_ID` from USER_LOG WHERE U_ID=1) order by RAND() limit 1)
3. get the video id and pauses for it ----done
4. implement the watch nextvideo()---- done


13/03/2020
1. get the videos wen next video button is pressed
2. in between of the video if player comes out of the game then starts from beginning.
	soln: get the last pause from local db and assign it to answerCount---------------least priority----pending
problem : after resuming, oncreate the videoName is fetched from server and played(video name is random, need not be the same video which was paused )
soln: store the videoname in db, on resuming the video, fetch the video name from the dblite----done
	
to test
1. fetch video from server
2. delete tables once game is over
3. sync data to server in table player_answer_info and player_pause_answers.
4. update in server table user log. 


download_player_answers.php response:
2:bottom:net:2000:,2:bottom:Drop:2000:,videos/video2.mp4

correctAnswers = {String[3]@5759}(split by ,)
 0 = "2:bottom:net:2000:" 
answerContents = {String[4]@5849} (split by :
 0 = "2"
 1 = "bottom"
 2 = "net"
 3 = "2000"
 1 = "2:bottom:Drop:2000:"
 2 = "videos/video2.mp4"


3:top right:net:2000:12,3:top right:Drive:2000:15,videos/video3.mp4



<player_record>
<selection>
<shot_type>Push</shot_type>
<shot_location>Top middle</shot_location>
<time>6</time>
<score>1</score>
<vid>2</vid></selection>

<total_time>6</total_time>
<total_score>1</total_score>
<pid>047</pid>
</player_record>

1.if (correctShotType[answerCount].equalsIgnoreCase(shotType)) { in play video class this line code crashing
2.insert into user_log watch_flag field is default set to 0 
	

16/03/2020
1.680:Middle Middle:Drive:234:15,videos/video1.mp4
2. next video is playing the same video....pending, wen it comes back to play video starts playin the same video so added onResume and onPostResume(), but not helping---Done
3. delete the db after sync to server ---done
4. check my answers review --- done
5. delete db after pressing next video. ----done	

things to ask praveen
2. automation of level for player after playing all the videos with threashold score.
3.get the videos on the basis of level assigned to it when initially getting the answer/pauses


2020-03-16 18:02:20.656 13269-13269/com.example.my_badminton E/AndroidRuntime: FATAL EXCEPTION: main
    Process: com.example.my_badminton, PID: 13269
    java.lang.IllegalArgumentException: reportSizeConfigurations: ActivityRecord not found for: Token{1437f44 ActivityRecord{2104857 u0 com.example.my_badminton/.ViewAnswers t-1 f}}
        at android.os.Parcel.readException(Parcel.java:2020)
        at android.os.Parcel.readException(Parcel.java:1962)
        at android.app.IActivityManager$Stub$Proxy.reportSizeConfigurations(IActivityManager.java:9312)
        at android.app.ActivityThread.reportSizeConfigurations(ActivityThread.java:2956)
        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2899)
        at android.app.ActivityThread.-wrap11(Unknown Source:0)
        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1616)
        at android.os.Handler.dispatchMessage(Handler.java:106)
        at android.os.Looper.loop(Looper.java:176)
        at android.app.ActivityThread.main(ActivityThread.java:6651)
        at java.lang.reflect.Method.invoke(Native Method)
        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:547)
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:824)
2020-03-16 18:02:20.750 13269-13995/com.example.my_badminton D/Response fro


18/03/2020
1. sync to server xml data

<player_record>
<selection>
<shot_type>Push</shot_type>
<shot_location>Middle middle</shot_location>
<time>14</time>
<score>0</score>
<vid>2</vid></selection>

<selection>
<shot_type>Drive</shot_type>
<shot_location>Middle middle</shot_location>
<time>15</time>
<score>0</score>
<vid>2</vid></selection>

<total_time>29</total_time>
<total_score>0</total_score>
<pid>047</pid>
</player_record>

2. pooja pending module
1.password reset
2. database connectivity for admin and coach

3. merge my code in her code --- pending
4. check video_upload.php ---- done
5. convert one of the project to library

19/03/2020

things to tell pooja
1.web service  in MyDbAdapter


20/03/2020
activities
1. /home/megha/Desktop/badminton/pooja/My_Badminton_megha(before cleanup) is my code before cleaning up
2


pooja's code

the code containing SQLiteOpenHelper
1.MyDbAdapter -- 
2. ScoreStorageAdapter--


things to do
3.background color change
4. font
5. merge
6. start game button background





1.clean up my code--- done
2. test cleaned up code.----pending
3.merge with poojas code.-pending
4. test after merging---pending
5.change the path to uploads from videos in code(videos are beeing taken from videos folder in php)


﻿https://stackoverflow.com/questions/574195/android-youtube-app-play-video-intent/12439378#12439378

https://stackoverflow.com/questions/56491694/how-to-play-youtube-video-inside-my-activity-picture-in-picture-mode

2/1/2020
1. pause video programatically, question answer class, on submit store the answers and rediret back to video activity and play from wher it stopped and repeat the same.
2. make ppl watch the whole video(15sec) with no manual pause or play.. and provide a button watch again and an answer button
removing the video view related functionalities.. before code

package com.example.my_badminton;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.MediaController;
import android.widget.Toast;
import android.widget.VideoView;

import androidx.annotation.RequiresApi;

import java.time.Duration;
import java.time.Instant;

public class YoutubeTrail extends Activity {
    String html = "<iframe width=\"560\" height=\"315\" src=\"http://www.youtube.com/watch?v=cRFnsOUoHmM\" frameborder=\"0\" allowfullscreen></iframe>\"";
    String url = "<iframe src='https://www.youtube.com/watch?v=cRFnsOUoHmM?fs=0' width='100%' height='100%' style='border: none;'></iframe>";
    int prevPausePos, currPausePos, pauseFlag, secondsCompleted, answerFlag;
    Button watchAgain, answerQuestions;
    String link;
    private VideoView vv;
    Runnable stopPlayerTask = new Runnable() {
        @Override
        public void run() {
            vv.pause();
            currPausePos = vv.getCurrentPosition();
            answerQuestions.setEnabled(true);
//          startActivity(new Intent(YoutubeTrail.this,SubmitAnswer.class));
//            showQuestions();
        }
    };


    private void showQuestions() {
        new AlertDialog.Builder(this)
                .setTitle("Answer the question")
                .setMessage("Q1.xxxxx?")
                .setIcon(android.R.drawable.ic_dialog_info)
                .setPositiveButton("ans", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        answerFlag = 1;
                        vv.seekTo(currPausePos);
                        vv.start();
                        autoPauseVideo();
                    }
                }).show();
    }

    @SuppressLint("SetJavaScriptEnabled")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_paly_video);
        vv = (VideoView) findViewById(R.id.video_view);
        watchAgain = findViewById(R.id.watch_again);
        answerQuestions = findViewById(R.id.answer_questions);
        watchAgain.setEnabled(false);
        answerQuestions.setEnabled(false);
        try {
            link = "http://stage1.optipacetech.com/badminton/videos/counting.mp4";
            MediaController mediaController = new MediaController(this);
            mediaController.setAnchorView(vv);
            Uri video = Uri.parse(link);
            vv.setMediaController(null);
            vv.setVideoURI(video);
            vv.start();
            autoPauseVideo();


        } catch (Exception e) {
            // TODO: handle exception
            Toast.makeText(this, "Error connecting", Toast.LENGTH_SHORT).show();
        }

    }

    private void autoPauseVideo() {
        Handler handler = new Handler();
        handler.postDelayed(stopPlayerTask, 12000 /*+ (secondsCompleted+1000)*/);//pauses at 9 secs
        watchAgain.setEnabled(true);
    }


    @RequiresApi(api = Build.VERSION_CODES.O)
    public void palyVideo(View view) throws InterruptedException {
        if (pauseFlag == 1) {
//            currPausePos = vv.getCurrentPosition();
            vv.seekTo(currPausePos);
            vv.start();
            Instant ends = Instant.now();
            Instant starts = Instant.now();
            Thread.sleep(10);

            Log.e("instant ", " " + Duration.between(starts, ends));
            autoPauseVideo();
        } else {
            watchAgain.setEnabled(false);
        }

    }

    @RequiresApi(api = Build.VERSION_CODES.O)
    public void pauseVideo(View view) throws InterruptedException {
        vv.pause();
        pauseFlag = 1;
        currPausePos = vv.getCurrentPosition();



       /* Stopwatch stopwatch = Stopwatch.createStarted();
        doSomething();
        stopwatch.stop(); // optional

        long millis = stopwatch.elapsed(TimeUnit.MILLISECONDS);

        log.info("that took: " + stopwatch); // formatted string like "12.3 ms"*/

    }

    public void answerQuestions(View view) {
        Toast.makeText(this, "Redirect to class!!!", Toast.LENGTH_SHORT).show();
        showQuestions();
     /*   vv.seekTo(currPausePos);
        vv.start();
        autoPauseVideo();*/
    }

    public void watchAgain(View view) {
        if (answerFlag == 1) {
            vv.seekTo(currPausePos);
        } else {
            
            vv.seekTo(prevPausePos);
        }
        vv.start();
        autoPauseVideo();


    }
}


07/01/2020
1. disable answer/watch button till the video stops automatically--- done
2. cant play the video. for android version 9 and above
 added *****android:usesCleartextTraffic="true" in manifest****** and worked

below is the clarification from android doc
___________________________________________________________________________________________________________________________________________________________
Indicates whether the app intends to use cleartext network traffic, such as cleartext HTTP. The default value for apps that target API level 27 or lower is "true". Apps that target API level 28 or higher default to "false".

When the attribute is set to "false", platform components (for example, HTTP and FTP stacks, DownloadManager, and MediaPlayer) will refuse the app's requests to use cleartext traffic. Third-party libraries are strongly encouraged to honor this setting as well. The key reason for avoiding cleartext traffic is the lack of confidentiality, authenticity, and protections against tampering; a network attacker can eavesdrop on transmitted data and also modify it without being detected.
___________________________________________________________________________________________________________________________________________________________

08/01/2020

wifi manager is added..

13/01/2020
pager2 with tab layout pending..

14/01/2020

preserve the value when switching from frame to frame
___________________________________________________________________________________________________________________________________________________________
16/01/2020
1.make fragmnet to get displayed
Bundle b = new Bundle();
b.putString("Key", "YourValue");
b.putInt("YourKey", 1);

2. make frgmnet available in an activity
FragmentB fragB = new FragmentB();
3.get the pauses from db onItemClick listener in the listofviews
fragB.setArguments(b); 
getFragmentManager().beginTransaction().replace(R.id.your_container, fragB);

Fragment B:

Bundle b = this.getArguments();
if(b != null){
   int i = b.getInt("YourKey");
   String s =b.getString("Key");
}

STOP THE VIDEO AT GIVEN TIME:
 if (mVideoView.getCurrentPosition() >= 12000) {
                            mVideoView.stopPlayback();
                            mShouldStop = true;
                        }

3.
thread is used to to stop at desired time.. which is not acting on views.. 
before adding the pauses:
package com.example.my_badminton;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.provider.Settings;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.MediaController;
import android.widget.Toast;
import android.widget.VideoView;

import java.io.IOException;

public class YoutubeTrail extends Activity {
    String html = "<iframe width=\"560\" height=\"315\" src=\"http://www.youtube.com/watch?v=cRFnsOUoHmM\" frameborder=\"0\" allowfullscreen></iframe>\"";
    String url = "<iframe src='https://www.youtube.com/watch?v=cRFnsOUoHmM?fs=0' width='100%' height='100%' style='border: none;'></iframe>";

    int initPos, currPos, watchAgainCount;
    Button watchAgain, answerQuestions;
    String link;
    MediaController mediaController;
    Handler handler;
    Intent intent;
    int REQUEST_ANSWER = 1;
    private boolean isReceiverRegistered = false;

    private VideoView vv;
    Runnable stopPlayerTask = new Runnable() {
        @Override
        public void run() {
            vv.pause();
            currPos = vv.getCurrentPosition();
//            watchAgain.setEnabled(true);
//            answerQuestions.setEnabled(true);
            buttonEnable();
            watchAgainCount = 0;

        }
    };
    private BroadcastReceiver receiver = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            NetworkInfo info = getNetworkInfo(context);
            if (info != null && info.isConnected()) {
                //Todo code to execute if wifi connected
            } else {                  //Todo code to execute if wifi disconnected
            }
        }
    };
    private String shotLoc, shotType;
    private boolean shdStop=false;

    private void buttonEnable() {
        watchAgain.setVisibility(View.VISIBLE);
        answerQuestions.setVisibility(View.VISIBLE);
    }

    private void showQuestions() {
        intent = new Intent(this, SubmitAnswer.class);

        new AlertDialog.Builder(this)
                .setTitle("Answer the question")
                .setMessage("Q1.xxxxx?")
                .setIcon(android.R.drawable.ic_dialog_info)
                .setPositiveButton("ans", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        startActivityForResult(intent, REQUEST_ANSWER);
                       /* initPos = currPos;
                        vv.seekTo(initPos);
                        vv.start();
                        buttonDisable();
//                        answerQuestions.setEnabled(false);
                        autoPauseVideo();*/
                    }
                }).show();
    }

    private void buttonDisable() {
        watchAgain.setVisibility(View.GONE);
        answerQuestions.setVisibility(View.GONE);
    }

    @SuppressLint("SetJavaScriptEnabled")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_paly_video);
        vv = (VideoView) findViewById(R.id.video_view);
        watchAgain = findViewById(R.id.watch_again);
        answerQuestions = findViewById(R.id.answer_questions);
        link = "http://stage1.optipacetech.com/badminton/videos/counting.mp4";
        handler = new Handler();
/*        if (isConnectingToInternet(this)) {
//            onStart();
            try {
                mediaController = new MediaController(this);
                mediaController.setAnchorView(vv);
                Uri video = Uri.parse(link);
                vv.setMediaController(null);
                vv.setVideoURI(video);
                vv.start();
                autoPauseVideo();


            } catch (Exception e) {
                // TODO: handle exception
                Toast.makeText(this, "Error connecting", Toast.LENGTH_SHORT).show();
            }
        } else {
//            enableWifi();

        }*/


//        watchAgain.setEnabled(false);
//        answerQuestions.setEnabled(false);


    }

    private void autoPauseVideo() {
//        handler.postDelayed(stopPlayerTask, 12000 /*+ (secondsCompleted+1000)*/);//pauses at 9 secs
        new Thread(new Runnable() {
            @Override
            public void run() {
                while(!shdStop)
                if (vv.getCurrentPosition() >= 12000) {
                    vv.stopPlayback();
                    shdStop=true;
                }
            }
        }).start();
    }

    public void answerQuestions(View view) {
        showQuestions();
    }

    public void watchAgain(View view) {
//        if (answerFlag == 0)
        if (watchAgainCount == 0) {
            watchAgainCount++;

            vv.seekTo(initPos);
//        else
//        vv.seekTo(currPos);

            vv.start();
//            answerQuestions.setEnabled(false);
            buttonDisable();
            autoPauseVideo();
        } else {
            Toast.makeText(this, "please wait!!", Toast.LENGTH_SHORT).show();
        }
    }

    private boolean isConnectingToInternet(Context applicationContext) {
        Runtime runtime = Runtime.getRuntime();
        try {
            Process mIpAddrProcess = runtime.exec("/system/bin/ping -c 1 8.8.8.8");
            int mExitValue = mIpAddrProcess.waitFor();
            System.out.println(" mExitValue " + mExitValue);
            if (mExitValue == 0) {
                return true;
            } else {
                return false;
            }
        } catch (InterruptedException ignore) {
            ignore.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    @Override
    protected void onStart() {

        super.onStart();
        if (isConnectingToInternet(this))
            try {
                mediaController = new MediaController(this);
                mediaController.setAnchorView(vv);
                Uri video = Uri.parse(link);
                vv.setMediaController(null);
                vv.setVideoURI(video);
                vv.seekTo(initPos);
                vv.start();
                buttonDisable();
                autoPauseVideo();


            } catch (Exception e) {
                // TODO: handle exception
                Toast.makeText(this, "Error connecting", Toast.LENGTH_SHORT).show();
            }
        else {
            Toast.makeText(this, "No Network", Toast.LENGTH_SHORT).show();
//            registerReceiver(receiver, new IntentFilter("android.net.conn.CONNECTIVITY_CHANGE"));

            enableWifi();
        }
    }

    private void enableWifi() {
        AlertDialog.Builder alertDialog = new AlertDialog.Builder(
                this);
        alertDialog.setTitle("Confirm...");
        alertDialog.setMessage("Do you want to go to wifi settings?");
        alertDialog.setPositiveButton("yes",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        startActivity(new Intent(Settings.ACTION_WIFI_SETTINGS));
                    }
                });
        alertDialog.setNegativeButton("no",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.cancel();
                    }
                });
        alertDialog.show();
    }

    @Override
    protected void onPause() {
        super.onPause();
        buttonDisable();
        handler.removeCallbacks(stopPlayerTask);
        if (isReceiverRegistered) {
            isReceiverRegistered = false;

            unregisterReceiver(receiver);
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
//        registerReceiver(receiver, new IntentFilter("android.net.conn.CONNECTIVITY_CHANGE"));
        if (!isReceiverRegistered) {
            isReceiverRegistered = true;
            registerReceiver(receiver, new IntentFilter("android.net.wifi.STATE_CHANGE"));
            vv.resume();
        }
    }

    private NetworkInfo getNetworkInfo(Context context) {
        ConnectivityManager connManager = (ConnectivityManager)
                context.getSystemService(Context.CONNECTIVITY_SERVICE);
        return connManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == REQUEST_ANSWER) {
            if (resultCode == Activity.RESULT_OK) {
                Bundle bundle = data.getExtras();
                shotLoc = (String) bundle.get("shot_location");
                shotType = (String) bundle.get("shot_type");
                Log.e("type and loc", "onActivityResult: " + shotLoc + "\n" + shotType);
                    /*Intent intent;
                    intent = new Intent(SwipeCard.this, OnlineTransActivity.class);
                    intent.putExtras(bundle);
                    startActivity(intent);*/
                initPos = currPos;
                vv.seekTo(initPos);
                vv.start();
                buttonDisable();
                autoPauseVideo();


            } else {
                Toast.makeText(getApplicationContext(), "Answer is not submitted", Toast.LENGTH_SHORT).show();
            }
        }

    }


}
___________________________________________________________________________________________________________________________________________________________
17/01/2019
1.place hint buttons on next to buttons.
2.ask karthik if long press buttons are ok?
3.display the result.
___________________________________________________________________________________________________________________________________________________________
20/01/2020
1.
image inside dialog
Dialog settingsDialog = new Dialog(this);
settingsDialog.getWindow().requestFeature(Window.FEATURE_NO_TITLE);
settingsDialog.setContentView(getLayoutInflater().inflate(R.layout.image_layout
        , null));
settingsDialog.show();

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="wrap_content" android:layout_height="wrap_content"
    android:orientation="vertical">
    <ImageView android:layout_width="wrap_content" 
        android:layout_height="wrap_content" android:src="YOUR IMAGE"/>
    <Button android:layout_width="wrap_content" android:layout_height="wrap_content"
        android:text="OK" android:onClick="dismissListener"/>
</LinearLayout>

2.add listview in scroll view..

___________________________________________________________________________________________________________________________________________________________
21/01/2020
1. add customized array
22/01/2020
1. create answers(model) and add setter and getters. and add this object in array adapter.
/data/data/com.example.my_badminton

___________________________________________________________________________________________________________________________________________________________
28/01/2020
provider:

package com.example.my_badminton;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.media.MediaPlayer;
import android.media.PlaybackParams;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.provider.Settings;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.MediaController;
import android.widget.Toast;
import android.widget.VideoView;

import com.google.android.youtube.player.YouTubeBaseActivity;
import com.google.android.youtube.player.YouTubeInitializationResult;
import com.google.android.youtube.player.YouTubePlayer;
import com.google.android.youtube.player.YouTubePlayerView;
import com.google.android.youtube.player.YouTubePlayer.Provider;


import java.io.IOException;

@SuppressLint("Registered")
public class YoutubeTrail extends YouTubeBaseActivity implements YouTubePlayer.OnInitializedListener {
    private static final int RECOVERY_REQUEST = 1;
    YouTubePlayerView youTubePlayerView;
    YouTubePlayer.OnInitializedListener onInitializedListener;
    private MyPlayerStateChangeListener playerStateChangeListener;
    private MyPlaybackEventListener playbackEventListener;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_youtube);
        playerStateChangeListener = new MyPlayerStateChangeListener();
        playbackEventListener = new MyPlaybackEventListener();
        youTubePlayerView = (YouTubePlayerView) findViewById(R.id.youtube_player_view);

        /*onInitializedListener = new YouTubePlayer.OnInitializedListener() {

            @Override
            public void onInitializationSuccess(YouTubePlayer.Provider provider, YouTubePlayer youTubePlayer, boolean b) {

            }

            @Override
            public void onInitializationFailure(YouTubePlayer.Provider provider, YouTubeInitializationResult youTubeInitializationResult) {

            }
        };*/
        youTubePlayerView.initialize(PlayerConfig.API_KEY, onInitializedListener);

    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == RECOVERY_REQUEST) {
            // Retry initialization if user performed a recovery action
            getYouTubePlayerProvider().initialize(PlayerConfig.API_KEY, this);
        }
    }

    protected Provider getYouTubePlayerProvider() {
        return youTubePlayerView;
    }

    private void showMessage(String message) {
        Toast.makeText(this, message, Toast.LENGTH_LONG).show();
    }

    @Override
    public void onInitializationSuccess(Provider provider, YouTubePlayer youTubePlayer, boolean b) {
        youTubePlayer.loadVideo("-72P_EFphSc");/*15qGHhFaWao*/
        youTubePlayer.play();
    }

    @Override
    public void onInitializationFailure(Provider provider, YouTubeInitializationResult youTubeInitializationResult) {

    }

    private final class MyPlaybackEventListener implements YouTubePlayer.PlaybackEventListener {

        @Override
        public void onPlaying() {
            // Called when playback starts, either due to user action or call to play().
            showMessage("Playing");
        }

        @Override
        public void onPaused() {
            // Called when playback is paused, either due to user action or call to pause().
            showMessage("Paused");
        }

        @Override
        public void onStopped() {
            // Called when playback stops for a reason other than being paused.
            showMessage("Stopped");
        }

        @Override
        public void onBuffering(boolean b) {
            // Called when buffering starts or ends.
        }

        @Override
        public void onSeekTo(int i) {
            // Called when a jump in playback position occurs, either
            // due to user scrubbing or call to seekRelativeMillis() or seekToMillis()
        }
    }

    private final class MyPlayerStateChangeListener implements YouTubePlayer.PlayerStateChangeListener {

        @Override
        public void onLoading() {
            // Called when the player is loading a video
            // At this point, it's not ready to accept commands affecting playback such as play() or pause()
        }

        @Override
        public void onLoaded(String s) {
            // Called when a video is done loading.
            // Playback methods such as play(), pause() or seekToMillis(int) may be called after this callback.
        }

        @Override
        public void onAdStarted() {
            // Called when playback of an advertisement starts.
        }

        @Override
        public void onVideoStarted() {
            // Called when playback of the video starts.
        }

        @Override
        public void onVideoEnded() {
            // Called when the video reaches its end.
        }

        @Override
        public void onError(YouTubePlayer.ErrorReason errorReason) {
            // Called when an error occurs.
        }
    }
}
_______________________________________________________________________________________________________________________________________
before adding pause==vv.getCurrantPos

package com.example.my_badminton;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.media.MediaPlayer;
import android.media.PlaybackParams;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.provider.Settings;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.MediaController;
import android.widget.Toast;
import android.widget.VideoView;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import java.io.IOException;

public class PlayVideo extends AppCompatActivity {
    static MediaPlayer mediaPlayer;
    String html = "<iframe width=\"560\" height=\"315\" src=\"http://www.youtube.com/watch?v=cRFnsOUoHmM\" frameborder=\"0\" allowfullscreen></iframe>\"";
    String url = "<iframe src='https://www.youtube.com/watch?v=cRFnsOUoHmM?fs=0' width='100%' height='100%' style='border: none;'></iframe>";
    int initPos, currPos, watchAgainCount, pauseAt = 0;
    Button watchAgain, answerQuestions;
    String link;
    MediaController mediaController;
    //    AnswersModel answersModel;
    Handler handler;
    Intent intent;
    int REQUEST_ANSWER = 1;
    //    DBHandler db;
    int pauses[] = {5, 6, 7};//9,19,29
    private boolean isReceiverRegistered = false;
    private VideoView vv;
    Runnable stopPlayerTask = new Runnable() {
        @Override
        public void run() {
            vv.pause();
            currPos = (vv.getCurrentPosition());/*(pauses[pauseAt])/11; vv.getCurrentPosition();*/
            Log.e("run: ", "stopped at sec " + vv.getCurrentPosition() + " currpos is " + currPos);
            buttonEnable();
            watchAgainCount = 0;


        }
    };
    final MediaPlayer.OnInfoListener onInfoToPlayStateListener = new MediaPlayer.OnInfoListener() {

        @Override
        public boolean onInfo(MediaPlayer mp, int what, int extra) {
            switch (what) {
                case MediaPlayer.MEDIA_INFO_VIDEO_RENDERING_START: {
                    Log.e("info", "MEDIA_INFO_VIDEO_RENDERING_START");
                    vv.seekTo(initPos);
                    vv.start();
                    buttonDisable();
                    autoPauseVideo(pauses[pauseAt], pauseAt);
                    return true;
                }
                case MediaPlayer.MEDIA_INFO_BUFFERING_START: {
                    Log.e("info", "MEDIA_INFO_BUFFERING_START");

                    return true;
                }
                case MediaPlayer.MEDIA_INFO_BUFFERING_END: {
                    Log.e("info", "MEDIA_INFO_BUFFERING_END");


                    return true;
                }
            }
            return false;
        }
    };
    private BroadcastReceiver receiver = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            NetworkInfo info = getNetworkInfo(context);
            if (info != null && info.isConnected()) {
                //Todo code to execute if wifi connected
            } else {                  //Todo code to execute if wifi disconnected
            }
        }
    };
    private String shotLoc, shotType;
    private boolean shdStop = false;

    private void buttonEnable() {
        watchAgain.setVisibility(View.VISIBLE);
        answerQuestions.setVisibility(View.VISIBLE);
    }

    private void showQuestions() {
        intent = new Intent(this, SubmitAnswer.class);

        new AlertDialog.Builder(this)
                .setTitle("Answer the question")
                .setMessage("Q1.xxxxx?")
                .setIcon(android.R.drawable.ic_dialog_info)
                .setPositiveButton("ans", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        startActivityForResult(intent, REQUEST_ANSWER);
                       /* initPos = currPos;
                        vv.seekTo(initPos);
                        vv.start();
                        buttonDisable();
//                        answerQuestions.setEnabled(false);
                        autoPauseVideo();*/
                    }
                }).show();
    }

    private void buttonDisable() {
        watchAgain.setVisibility(View.GONE);
        answerQuestions.setVisibility(View.GONE);
    }

    @SuppressLint("SetJavaScriptEnabled")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_paly_video);
        vv = (VideoView) findViewById(R.id.video_view);
//        db=new DBHandler(this);
        watchAgain = findViewById(R.id.watch_again);
        answerQuestions = findViewById(R.id.answer_questions);
        link = "http://stage1.optipacetech.com/badminton/videos/counting.mp4";
        handler = new Handler();

/*        if (isConnectingToInternet(this)) {
//            onStart();
            try {
                mediaController = new MediaController(this);
                mediaController.setAnchorView(vv);
                Uri video = Uri.parse(link);
                vv.setMediaController(null);
                vv.setVideoURI(video);
                vv.start();
                autoPauseVideo();


            } catch (Exception e) {
                // TODO: handle exception
                Toast.makeText(this, "Error connecting", Toast.LENGTH_SHORT).show();
            }
        } else {
//            enableWifi();

        }*/


//        watchAgain.setEnabled(false);
//        answerQuestions.setEnabled(false);


    }

    private void autoPauseVideo(final int pauseAt, int nonTimer) {
        //to stop on media player
/*while(vv.getCurrentPosition()==pauseAt)
            Toast.makeText(this, "stopHere!!!", Toast.LENGTH_SHORT).show();
            vv.pause();
            currPos = vv.getCurrentPosition();
            buttonEnable();
            watchAgainCount = 0;
        }*/
        Log.e("autoPauseVideo:", " timer " + pauseAt + "\n video time " + nonTimer);
        handler.postDelayed(stopPlayerTask, pauseAt /*+ (secondsCompleted+1000)*/);//pauses at 9 secs
       /* new Thread(new Runnable() {
            @Override
            public void run() {
                while(!shdStop)
                if (vv.getCurrentPosition() >= pauseAt) {
                    vv.stopPlayback();
                    shdStop=true;
                    currPos = vv.getCurrentPosition();
//                    buttonEnable();
                    watchAgainCount = 0;
                }
            }
        }).start();*/
    }

    public void answerQuestions(View view) {
        showQuestions();
    }

    public void watchAgain(View view) {
//        if (answerFlag == 0)
        if (watchAgainCount == 0) {
            watchAgainCount++;

            vv.seekTo(initPos);
//        else
//        vv.seekTo(currPos);

            vv.start();
//            answerQuestions.setEnabled(false);
            buttonDisable();
            autoPauseVideo(pauses[pauseAt], pauseAt);
        } else {
            Toast.makeText(this, "please wait!!", Toast.LENGTH_SHORT).show();
        }
    }

    private boolean isConnectingToInternet(Context applicationContext) {
        Runtime runtime = Runtime.getRuntime();
        try {
            Process mIpAddrProcess = runtime.exec("/system/bin/ping -c 1 8.8.8.8");
            int mExitValue = mIpAddrProcess.waitFor();
            System.out.println(" mExitValue " + mExitValue);
            if (mExitValue == 0) {
                return true;
            } else {
                return false;
            }
        } catch (InterruptedException ignore) {
            ignore.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    @Override
    protected void onStart() {

        super.onStart();
        if (isConnectingToInternet(this))
            try {
                mediaController = new MediaController(this);
                mediaController.setAnchorView(vv);
                Uri video = Uri.parse(link);
                vv.setMediaController(mediaController);

                vv.setVideoURI(video);
                Log.e("onPrepared11: ", "pauses[pauseAt] " + pauses[pauseAt] + " pauseAt " + pauseAt + "initpos" + initPos);
                vv.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
                    @Override
                    public void onPrepared(MediaPlayer mp) {
                        PlaybackParams myPlayBackParams = null;
                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {
                            myPlayBackParams = new PlaybackParams();
                            myPlayBackParams.setSpeed(0.2f); //you can set speed here
                            mp.setPlaybackParams(myPlayBackParams);
                            vv.setOnInfoListener(onInfoToPlayStateListener);
                            /*if (vv.requestFocus()) {
                                vv.seekTo(initPos);
                                vv.start();
                                buttonDisable();
                                autoPauseVideo(pauses[pauseAt], pauseAt);

                            }*/
                            //mp.seekTo(initPos);
                        }


                        Log.e("onPrepared22: ", "pauses[pauseAt] " + pauses[pauseAt] + " pauseAt " + pauseAt + "initpos" + initPos);

                    }
                });

                //vv.seekTo(initPos);
                //vv.start();
                //buttonDisable();


            } catch (Exception e) {
                // TODO: handle exception
                Toast.makeText(this, "Error connecting", Toast.LENGTH_SHORT).show();
            }
        else {
            Toast.makeText(this, "No Network", Toast.LENGTH_SHORT).show();
//            registerReceiver(receiver, new IntentFilter("android.net.conn.CONNECTIVITY_CHANGE"));

            enableWifi();
        }
    }

    private void enableWifi() {
        AlertDialog.Builder alertDialog = new AlertDialog.Builder(
                this);
        alertDialog.setTitle("Confirm...");
        alertDialog.setMessage("Do you want to go to wifi settings?");
        alertDialog.setPositiveButton("yes",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        startActivity(new Intent(Settings.ACTION_WIFI_SETTINGS));
                    }
                });
        alertDialog.setNegativeButton("no",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.cancel();
                    }
                });
        alertDialog.show();
    }

    @Override
    protected void onPause() {
        super.onPause();
        buttonDisable();
        handler.removeCallbacks(stopPlayerTask);
        if (isReceiverRegistered) {
            isReceiverRegistered = false;
            unregisterReceiver(receiver);
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
//        registerReceiver(receiver, new IntentFilter("android.net.conn.CONNECTIVITY_CHANGE"));
        if (!isReceiverRegistered) {
            isReceiverRegistered = true;
            registerReceiver(receiver, new IntentFilter("android.net.wifi.STATE_CHANGE"));
            vv.resume();
        }
    }

    private NetworkInfo getNetworkInfo(Context context) {
        ConnectivityManager connManager = (ConnectivityManager)
                context.getSystemService(Context.CONNECTIVITY_SERVICE);
        return connManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == REQUEST_ANSWER) {
            if (resultCode == Activity.RESULT_OK) {
                final Bundle bundle = data.getExtras();
                shotLoc = (String) bundle.get("shot_location");
                shotType = (String) bundle.get("shot_type");
//                db.saveAnswers(shotLoc,shotType);
                Log.e("type and loc", "onActivityResult: " + shotLoc + "\n" + shotType);

                /*answersModel.setShotLocation((String) bundle.get("shot_location"));
                answersModel.setShotType((String) bundle.get("shot_type"));*/


                    /*Intent intent;
                    intent = new Intent(SwipeCard.this, OnlineTransActivity.class);
                    intent.putExtras(bundle);
                    startActivity(intent);*/
                Log.e("onActivityResult0", "curr pos " + currPos + "\n init pos " + initPos);

                if (!(pauseAt > pauses.length)) {
                    Log.e("onActivityResult1", "curr pos " + currPos + "\n init pos " + initPos);
                    initPos = currPos;
                    pauseAt = pauseAt + 1;
                    Log.e("onActivityResult2", "curr pos " + currPos + "\n init pos " + initPos);


                    // below code is useless coz after activity result it goes to onstart() which has below code.

                   /* vv.seekTo(initPos);
//                    vv.start();
                    buttonDisable();
                    try {
                        autoPauseVideo(pauses[pauseAt++]);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        e.printStackTrace();
                    }*/
                }

                vv.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                    @Override
                    public void onCompletion(MediaPlayer mp) {
                        Log.e("redirecting", "to view answer");
                        startActivity(new Intent(getApplication(), ViewAnswers.class).putExtras(bundle));

                    }
                });

            }


        } else {
            Toast.makeText(getApplicationContext(), "Answer is not submitted", Toast.LENGTH_SHORT).show();
        }
    }

}
___________________________________________________________________________________________________________________________________________________
29/01/2020
try this for progress bar position
@Override
public void run() {
    // TODO Auto-generated method stub

    try {
        while (mp != null) {
            int currentPosition = mp.getCurrentPosition();
            Message msg = new Message();
            msg.what = currentPosition;
            threadHandler.sendMessage(msg);

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
                System.out.println("interrupt exeption" + e);
            }
        }
    }

    catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        System.out.println("My exeption" + e);
    } 
}


when handlerTime = handlerTime + 10 
the values are 
E/run:: current pos 0
E/info: MEDIA_INFO_VIDEO_RENDERING_START
E/run:: current pos 26
E/run:: current pos 33
E/run:: current pos 41
E/run:: current pos 51
E/run:: current pos 63
E/run:: current pos 78
I/zygote64: Do partial code cache collection, code=61KB, data=46KB
I/zygote64: After code cache collection, code=61KB, data=46KB
    Increasing code cache capacity to 256KB
E/run:: current pos 94
E/run:: current pos 113
E/run:: current pos 133
E/run:: current pos 156
E/run:: current pos 180
E/run:: current pos 209
E/run:: current pos 238
E/run:: current pos 287
E/run:: current pos 320
W/Adreno-ES20: <core_glFinish:34>: glFinish skipped: 0
W/Adreno-ES20: <core_glFinish:34>: glFinish skipped: 0
E/run:: current pos 354
E/run:: current pos 391
E/run:: current pos 429
E/run:: current pos 470
E/run:: current pos 512
E/run:: current pos 557
E/run:: current pos 603
E/run:: current pos 652
I/zygote64: Do full code cache collection, code=124KB, data=94KB
I/zygote64: After code cache collection, code=96KB, data=65KB
E/run:: current pos 703
E/run:: current pos 755
E/run:: current pos 810
E/run:: current pos 866
E/run:: current pos 924
E/run:: current pos 985
E/run:: current pos 1047
E/run:: current pos 1125
E/run:: current pos 1191
E/run:: current pos 1260
E/run:: current pos 1330
E/run:: current pos 1403
E/run:: current pos 1477
E/run:: current pos 1553
E/run:: current pos 1632
E/run:: current pos 1712
E/run:: current pos 1795
E/run:: current pos 1854
E/run:: current pos 1941
E/run:: current pos 2030
E/run:: current pos 2120
E/run:: current pos 2213
E/run:: current pos 2307
E/run:: current pos 2419
E/run:: current pos 2518
E/run:: current pos 2618
W/Adreno-EGL: <qeglDrvAPI_eglGetConfigAttrib:612>: EGL_BAD_ATTRIBUTE
D/vndksupport: Loading /vendor/lib64/hw/gralloc.msm8937.so from current namespace instead of sphal namespace.
E/run:: current pos 2721
I/zygote64: Do partial code cache collection, code=123KB, data=89KB
    After code cache collection, code=123KB, data=89KB
    Increasing code cache capacity to 512KB
E/run:: current pos 2825
E/run:: current pos 2932
E/run:: current pos 3041
E/run:: current pos 3152
W/Adreno-ES20: <core_glFinish:34>: glFinish skipped: 0
W/Adreno-ES20: <core_glFinish:34>: glFinish skipped: 0
E/run:: current pos 3247
E/run:: current pos 3362
E/run:: current pos 3466
E/run:: current pos 3585
E/run:: current pos 3705
E/run:: current pos 3828
E/run:: current pos 3974
E/run:: current pos 4100
E/run:: current pos 4216
I/zygote64: Compiler allocated 6MB to compile void android.view.ViewRootImpl.performTraversals()
E/run:: current pos 4346
E/run:: current pos 4479
E/run:: current pos 4613
E/run:: current pos 4736
E/run:: current pos 4875
E/run:: current pos 5017
E/run:: current pos 5159
E/run:: current pos 5319
E/run:: current pos 5465
E/run:: current pos 5603
E/run:: current pos 5754
E/run:: current pos 5906
E/run:: current pos 6042
E/run:: current pos 6199
E/run:: current pos 6346
E/run:: current pos 6507
E/run:: current pos 6703
E/run:: current pos 6867
E/run:: current pos 7034
E/run:: current pos 7183
E/run:: current pos 7354
E/run:: current pos 7527
E/run:: current pos 7702
E/run:: current pos 7867
E/run:: current pos 8045
E/run:: current pos 8212
E/run:: current pos 8399
_________________________________
when handlerTime = handlerTime + 100
E/run:: current pos 0
W/MediaPlayerNative: info/warning (3, 0)
E/info: MEDIA_INFO_VIDEO_RENDERING_START
E/run:: current pos 51
E/run:: current pos 112
E/run:: current pos 192
E/run:: current pos 302
I/zygote64: Do partial code cache collection, code=58KB, data=47KB
I/zygote64: After code cache collection, code=58KB, data=47KB
    Increasing code cache capacity to 256KB
E/run:: current pos 422
E/run:: current pos 563
W/Adreno-ES20: <core_glFinish:34>: glFinish skipped: 0
W/Adreno-ES20: <core_glFinish:34>: glFinish skipped: 0
E/run:: current pos 723
E/run:: current pos 904
E/run:: current pos 1091
E/run:: current pos 1312
E/run:: current pos 1540
E/run:: current pos 1801
E/run:: current pos 2101
E/run:: current pos 2386
E/run:: current pos 2707
E/run:: current pos 3048
E/run:: current pos 3392
E/run:: current pos 3795
E/run:: current pos 4195
E/run:: current pos 4594
E/run:: current pos 5048
E/run:: current pos 5508
I/zygote64: Do full code cache collection, code=123KB, data=88KB
I/zygote64: After code cache collection, code=97KB, data=64KB
E/run:: current pos 5970
E/run:: current pos 6480
____________________________________________
when handlerTime = handlerTime + 1
E/run:: current pos 0
E/run:: current pos 89
E/run:: current pos 100
E/run:: current pos 107
E/run:: current pos 114
E/run:: current pos 126
W/MediaPlayerNative: info/warning (3, 0)
E/run:: current pos 147
E/info: MEDIA_INFO_VIDEO_RENDERING_START
E/run:: current pos 156
I/zygote64: Do partial code cache collection, code=60KB, data=46KB
I/zygote64: After code cache collection, code=60KB, data=46KB
    Increasing code cache capacity to 256KB
E/run:: current pos 170
E/run:: current pos 178
E/run:: current pos 183
E/run:: current pos 195
E/run:: current pos 205
E/run:: current pos 213
E/run:: current pos 218
E/run:: current pos 224
E/run:: current pos 231
E/run:: current pos 238
E/run:: current pos 246
E/run:: current pos 254
E/run:: current pos 265
E/run:: current pos 279
E/run:: current pos 289
E/run:: current pos 301
E/run:: current pos 307
I/zygote64: Do full code cache collection, code=124KB, data=94KB
I/zygote64: After code cache collection, code=92KB, data=62KB
E/run:: current pos 313
E/run:: current pos 320
E/run:: current pos 327
E/run:: current pos 333
E/run:: current pos 340
E/run:: current pos 290
E/run:: current pos 297
E/run:: current pos 304
E/run:: current pos 311
E/run:: current pos 320
E/run:: current pos 328
E/run:: current pos 337
E/run:: current pos 345
E/run:: current pos 353
E/run:: current pos 362
E/run:: current pos 372
E/run:: current pos 381
E/run:: current pos 390
E/run:: current pos 399
E/run:: current pos 409
if want to pause, increase the remaining time by counting the time paused and add.
______________________________________________________________________________________________________________________________________________
30/01/2020
 the pauses are{
0.16692996423721312(),0.7987609985694886
1.7136649866485596, 2.1010930276565554
3.4260490295639037,4.04645494802475
5.262332974250794,5.753871975681305
7.0304789957084655,7.969838037670136
8.617399953269958,9.336854976158142
10.425100980926514,10.86966297329712
_________________________________________________________________________________________________________________________________________________
vv.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
                    @Override
                    public void onPrepared(MediaPlayer mp) {
                        int current, tempCurr, duration;
                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {

                            myPlayBackParams.setSpeed(0.2f); //you can set speed here
                            mp.setPlaybackParams(myPlayBackParams);
                            vv.setOnInfoListener(onInfoToPlayStateListener);
                            handler.postDelayed(stopPlayerTask, handlerTime);

                        }
                    }
                });

_________________________________________________________________________________________________________________________________________________
31/01/2020
1.fine pausing at first 	
2.mp.setPlayback play the video automatically..
test codes are written in new download file
__________________________________________________________________________________________________________________________________________________
03/02/2020
perfectly working(pausing )
package com.example.my_badminton;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.media.MediaPlayer;
import android.media.PlaybackParams;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Parcelable;
import android.os.PersistableBundle;
import android.provider.Settings;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.MediaController;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.VideoView;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;

import java.io.IOException;

@RequiresApi(api = Build.VERSION_CODES.O)
public class PlayVideo extends AppCompatActivity {
    static MediaPlayer mediaPlayer;
    final MediaPlayer.OnInfoListener onInfoToPlayStateListener = new MediaPlayer.OnInfoListener() {

        @Override
        public boolean onInfo(MediaPlayer mp, int what, int extra) {
            switch (what) {
                case MediaPlayer.MEDIA_INFO_VIDEO_RENDERING_START: {
                    Log.e("info", "MEDIA_INFO_VIDEO_RENDERING_START");
                    /*vv.seekTo(initPos);
                    vv.start();
                    buttonDisable();
                    autoPauseVideo(pauses[pauseAt], pauseAt);*/
                    return true;
                }
                case MediaPlayer.MEDIA_INFO_BUFFERING_START: {
                    Log.e("info", "MEDIA_INFO_BUFFERING_START");

                    return true;
                }
                case MediaPlayer.MEDIA_INFO_BUFFERING_END: {
                    Log.e("info", "MEDIA_INFO_BUFFERING_END");


                    return true;
                }
            }
            return false;
        }
    };
    String html = "<iframe width=\"560\" height=\"315\" src=\"http://www.youtube.com/watch?v=cRFnsOUoHmM\" frameborder=\"0\" allowfullscreen></iframe>\"";
    String url = "<iframe src='https://www.youtube.com/watch?v=cRFnsOUoHmM?fs=0' width='100%' height='100%' style='border: none;'></iframe>";
    int initPos, currPos, watchAgainCount, pauseAt, REQUEST_ANSWER = 1, answerCount;
    Button watchAgain, answerQuestions;
    String link;
    MediaController mediaController;
    Bundle bundle = new Bundle();
    TextView ctv;
    //    AnswersModel answersModel;
    Handler handler;
    Intent intent;
    //    DBHandler db;\
    int[] pauses = {166, 798, 1713, 2101, 3426, 4046, 5262, 5753, 7030, 7969, 8617, 9336, 10425, 10869};
    //    String[] pauses = {"0166", "0798","1713", "2101", "3426", "4046", "5262", "5753", "7030", "7969", "8617", "9336", "10425", "10869"};
    int handlerTime = 0, remainingTime = 500000;
    String sCurrPos = "";
    private boolean isReceiverRegistered = false;
    private VideoView vv;
    Runnable stopPlayerTask = new Runnable() {
        @Override
        public void run() {
            remainingTime = remainingTime - handlerTime;
            sCurrPos = String.valueOf(currPos = (vv.getCurrentPosition()));/*(pauses[pauseAt])/11; vv.getCurrentPosition();*/
            /*if (sCurrPos.length() == 3) { // assuming that the first pause will be after 100th sec so ==3
                sCurrPos = "0" + sCurrPos;// append 0 so that it matches with given pause time
                Log.e("run: ", "String current pos subString " + sCurrPos.substring(0, 3) + " pause[] value " + pauses[pauseAt].substring(0, 3));
            }*/
            if (pauses[pauseAt] <= currPos)/*sCurrPos.length() >= 4 && sCurrPos.substring(0, 3).equals(pauses[pauseAt].substring(0, 3))*/ {
                Log.e("run: ", "String current pos subString " + sCurrPos + " pause[] value " + pauses[pauseAt] + "media Player " + mediaPlayer);
                mediaPlayer.pause();
//                vv.pause();
                buttonEnable();
                watchAgainCount = 0;
            }

            ctv.setText(sCurrPos);

            if (remainingTime > 0 && vv.isPlaying()) {
                handler.postDelayed(stopPlayerTask, handlerTime = handlerTime + 1);
            }

        }
    };
    private BroadcastReceiver receiver = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            NetworkInfo info = getNetworkInfo(context);
            if (info != null && info.isConnected()) {
                //Todo code to execute if wifi connected
            } else {                  //Todo code to execute if wifi disconnected
            }
        }
    };
    private String shotLoc, shotType;
    private boolean shdStop = false;

    private void buttonEnable() {
        watchAgain.setVisibility(View.VISIBLE);
        answerQuestions.setVisibility(View.VISIBLE);
    }

    private void showQuestions() {
        intent = new Intent(this, SubmitAnswer.class);

        new AlertDialog.Builder(this)
                .setTitle("Answer the question")
                .setMessage("Q1.xxxxx?")
                .setIcon(android.R.drawable.ic_dialog_info)
                .setPositiveButton("ans", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        startActivityForResult(intent, REQUEST_ANSWER);
                    }
                }).show();
    }

    private void buttonDisable() {
        watchAgain.setVisibility(View.GONE);
        answerQuestions.setVisibility(View.GONE);
    }

    @SuppressLint("SetJavaScriptEnabled")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_paly_video);
        vv = (VideoView) findViewById(R.id.video_view);
        ctv = findViewById(R.id.count_down);
//        db=new DBHandler(this);
        watchAgain = findViewById(R.id.watch_again);
        answerQuestions = findViewById(R.id.answer_questions);
        link = "http://stage1.optipacetech.com/badminton/videos/training.mp4";
//        link = "android.resource://" + getPackageName() + "/" + R.raw.training;
        handler = new Handler();

        if (isConnectingToInternet(this))
            try {
                if (mediaController == null) {
                    mediaController = new MediaController(this);
                }
                mediaController.setAnchorView(vv);
                Uri video = Uri.parse(link);
                vv.setMediaController(null);

                vv.setVideoURI(video);
//                vv.seekTo(initPos);
//                vv.start();
                buttonDisable();
//                while (vv.getCurrentPosition() == pauses[pauseAt] * 1000) {
//                autoPauseVideo(pauses[pauseAt], pauseAt);
//                }

                Log.e("onPrepared11: ", "pauses[pauseAt] " + pauses[pauseAt] + " pauseAt " + pauseAt + "initpos" + initPos + "answercount");
                vv.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
                    @RequiresApi(api = Build.VERSION_CODES.O)
                    @Override
                    public void onPrepared(MediaPlayer mp) {
                        mediaPlayer = mp;
                        int current, tempCurr, duration;
                        PlaybackParams myPlayBackParams = null;
                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {
                            myPlayBackParams = new PlaybackParams();
                            myPlayBackParams.setSpeed(0.2f); //you can set speed here

//                            if (answerCount == 0) {
                            mp.setPlaybackParams(myPlayBackParams);
//                            }
                            mp.seekTo(initPos, MediaPlayer.SEEK_CLOSEST);
                            mp.start();
                            vv.setOnInfoListener(onInfoToPlayStateListener);
                            handler.postDelayed(stopPlayerTask, handlerTime);
                            /*vv.seekTo(initPos);
                            vv.start();*/
                            buttonDisable();

                        }
                        Log.e("onPrepared22: ", "pauses[pauseAt] " + pauses[pauseAt] + " pauseAt " + pauseAt + "initpos" + initPos);
                    }
                });
            } catch (Exception e) {
                // TODO: handle exception
                Toast.makeText(this, "Error connecting", Toast.LENGTH_SHORT).show();
            }
        else {
            Toast.makeText(this, "No Network", Toast.LENGTH_SHORT).show();
//            registerReceiver(receiver, new IntentFilter("android.net.conn.CONNECTIVITY_CHANGE"));

            enableWifi();
        }
    }

    private void autoPauseVideo(final int pauseAt, int nonTimer) {
        //to stop on media player
/*while(vv.getCurrentPosition()==pauseAt)
            Toast.makeText(this, "stopHere!!!", Toast.LENGTH_SHORT).show();*/
        vv.pause();
        currPos = vv.getCurrentPosition();
        buttonEnable();
        watchAgainCount = 0;

        Log.e("autoPauseVideo:", " timer " + pauseAt + "\n video time " + nonTimer);
//        handler.postDelayed(stopPlayerTask, vv.getCurrentPosition()/*+ (secondsCompleted+1000)*/);//pauses at 9 secs
//        handler.post(stopPlayerTask);
    }

    @Override
    protected void onSaveInstanceState(@NonNull Bundle savedInstanceState) {
        super.onSaveInstanceState(savedInstanceState);
        savedInstanceState.putInt("Position", pauses[pauseAt]);// coz this is where we want the video to get paused.
    }

    @Override
    protected void onRestoreInstanceState(@NonNull Bundle savedInstanceState) {
        super.onRestoreInstanceState(savedInstanceState);
        currPos = savedInstanceState.getInt("Position");
        vv.seekTo(currPos);
    }

    @Override
    public void onRestoreInstanceState(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
        super.onRestoreInstanceState(savedInstanceState, persistentState);
        currPos = savedInstanceState.getInt("Position");
        vv.seekTo(currPos);
    }

    @RequiresApi(api = Build.VERSION_CODES.O)
    public void answerQuestions(View view) {
        // testing.. this view is acted as play button
        /*if (!(pauseAt > pauses.length)) {
            initPos = currPos;
            pauseAt = pauseAt + 1;
            Log.e("answerButton pressed", " init pos is " + initPos);
            vv.requestFocus();
//            mediaPlayer.start();
            mediaPlayer.seekTo(initPos,MediaPlayer.SEEK_CLOSEST);
            mediaPlayer.setOnSeekCompleteListener(new MediaPlayer.OnSeekCompleteListener() {
                @Override
                public void onSeekComplete(MediaPlayer mp) {
                    mediaPlayer.start();
                }
            });
*//*
            vv.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
                @Override
                public void onPrepared(MediaPlayer mp) {
                    mp.setOnSeekCompleteListener(new MediaPlayer.OnSeekCompleteListener() {
                        @Override
                        public void onSeekComplete(MediaPlayer mp) {
                            vv.seekTo(initPos);
                            vv.start();
                            Log.e("answerButton pressed", " onprepared " + initPos);

                        }
                    });



                }
            });
*//*
            buttonDisable();
            handler.postDelayed(stopPlayerTask, handlerTime);

        }*/
        showQuestions();
    }

    public void watchAgain(View view) {
//        if (answerFlag == 0)
        if (watchAgainCount == 0) {
            watchAgainCount++;

            mediaPlayer.seekTo(initPos, MediaPlayer.SEEK_CLOSEST);
            vv.seekTo(initPos);
//        else
//        vv.seekTo(currPos);

            vv.start();
//            answerQuestions.setEnabled(false);
            buttonDisable();
//            autoPauseVideo(pauses[pauseAt], pauseAt);
        } else {
            Toast.makeText(this, "please wait!!", Toast.LENGTH_SHORT).show();
        }
    }

    private boolean isConnectingToInternet(Context applicationContext) {
        Runtime runtime = Runtime.getRuntime();
        try {
            Process mIpAddrProcess = runtime.exec("/system/bin/ping -c 1 8.8.8.8");
            int mExitValue = mIpAddrProcess.waitFor();
            System.out.println(" mExitValue " + mExitValue);
            if (mExitValue == 0) {
                return true;
            } else {
                return false;
            }
        } catch (InterruptedException ignore) {
            ignore.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    @Override
    protected void onStart() {

        super.onStart();

    }

    private void enableWifi() {
        AlertDialog.Builder alertDialog = new AlertDialog.Builder(
                this);
        alertDialog.setTitle("Confirm...");
        alertDialog.setMessage("Do you want to go to wifi settings?");
        alertDialog.setPositiveButton("yes",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        startActivity(new Intent(Settings.ACTION_WIFI_SETTINGS));
                    }
                });
        alertDialog.setNegativeButton("no",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.cancel();
                    }
                });
        alertDialog.show();
    }

    @Override
    protected void onPause() {
        super.onPause();
        buttonDisable();
        handler.removeCallbacks(stopPlayerTask);
        if (isReceiverRegistered) {
            isReceiverRegistered = false;
            unregisterReceiver(receiver);
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
//        registerReceiver(receiver, new IntentFilter("android.net.conn.CONNECTIVITY_CHANGE"));
        if (!isReceiverRegistered) {
            isReceiverRegistered = true;
            registerReceiver(receiver, new IntentFilter("android.net.wifi.STATE_CHANGE"));
            vv.resume();
        }
    }

    private NetworkInfo getNetworkInfo(Context context) {
        ConnectivityManager connManager = (ConnectivityManager)
                context.getSystemService(Context.CONNECTIVITY_SERVICE);
        return connManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == REQUEST_ANSWER) {
            if (resultCode == Activity.RESULT_OK) {
                final Bundle bundle = data.getExtras();
                shotLoc = (String) bundle.get("shot_location");
                shotType = (String) bundle.get("shot_type");
//                db.saveAnswers(shotLoc,shotType);
                Log.e("type and loc", "onActivityResult: " + shotLoc + "\n" + shotType);

                /*answersModel.setShotLocation((String) bundle.get("shot_location"));
                answersModel.setShotType((String) bundle.get("shot_type"));*/


                    /*Intent intent;
                    intent = new Intent(SwipeCard.this, OnlineTransActivity.class);
                    intent.putExtras(bundle);
                    startActivity(intent);*/
                Log.e("onActivityResult0", "curr pos " + currPos + "\n init pos " + initPos);

                if (!(pauseAt > pauses.length)) {
                    Log.e("onActivityResult1", "curr pos " + currPos + "\n init pos " + initPos);
                    initPos = currPos;
                    pauseAt = pauseAt + 1;
                    answerCount++;
                    Log.e("onActivityResult2", "curr pos " + currPos + "\n init pos " + initPos);


                    // below code is useless coz after activity result it goes to onstart() which has below code.

                   /* vv.seekTo(initPos);
//                    vv.start();
                    buttonDisable();
                    try {
                        autoPauseVideo(pauses[pauseAt++]);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        e.printStackTrace();
                    }*/
                }

                vv.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                    @Override
                    public void onCompletion(MediaPlayer mp) {
                        Log.e("redirecting", "to view answer");
                        startActivity(new Intent(getApplication(), ViewAnswers.class).putExtras(bundle));

                    }
                });

            }


        } else {
            Toast.makeText(getApplicationContext(), "Answer is not submitted", Toast.LENGTH_SHORT).show();
        }
    }

}

2. on finish of video (one session) send the answer to the server.
3.POINTS TO BE NOTED is saved in mail
4. ListOfAnswers to be done..

07/02/2020
1.left out modules
a.total time to answer the questions.
b.total score.

10/02/2020
1. change the button style..
2. after adding progress bar, sometimes the video starts from first.(testing)--resolved, but again the handler is called..
3. add progress bar in the onInfoToPlayStateListener().---not helping

tested styles
1. Widget.AppCompat.Button.Colored

button style and background theme


17/02/2020

1.download_answer.php pending
2. answer validation.pending
3.upload answer and score.pending
4. cant play this video when server is not reachable.handle this.
5. try mvc architecture.


19/02/2020
1. the data is not getting posting. 404 error.

20/02/2020
1.fetch pauses from playvideo.


25/02/2020
1.time calculation per question-done.
2.button on court- partially done.
3. Total score calculation -pending
4 Total duration taken to answer -done
5.onClickListener of custom adapter shd show the video clip-- pending

26/02/2020
1. set text in view answers for total answers.

02/03/2020

SELECT PAUSES  FROM PAUSES_TABLE WHERE PID IN(2,3)
1. 	review the video fot the slot.-done
2. stop at last pause---- pending(if non related video part, then clip the video by admin)  
3. mp throws exception illegal state exception--pending
4. review for 0th item crashing-- done
5. if crashes then  the listview is not shown, save the answers in db.	-- done
6. display myanswers in a dialog.--done


04/03/2020
1. set flag after game was completed.---pending
2. able CORRECT_ANSWER has no column named PAUSES --done
CREATE TABLE IF NOT EXISTS CORRECT_ANSWER(AID INTEGER PRIMARY KEY,SHOT_TYPE TEXT,SHOT_LOCTION TEXT,PAUSES NUMBER,SERVER_TIME NUMBER)----done
3. correct asnwer stores the value everytime the app is launched (checking if table is empty)--done
check whether the table is emplty, if yes then add the data into table----done
4.score validation in geanswerImpl-done

6/03/2020
5. doesnt play video when network is off, after turning on also doesnt play, write networkListener --pending
6. correct answer values are storeed in the database with a space-- make changes in pause.php---pending

09/03/2020
1.score calculation for type, loc,time each 1 point
2. sync to server-- pending
3. formed the xml in db handler. access the return value

example
{
    "name": "sample",
    "def": [
        {
            "setId": 1,
            "setDef": [
                {
                    "name": "ABC",
                    "type": "STRING"
                },
                {
                    "name": "XYZ",
                    "type": "STRING"
                }
            ]
        },
        {
            "setId": 2,
            "setDef": [
                {
                    "name": "abc",
                    "type": "STRING"
                },
                {
                    "name": "xyz",
                    "type": "STRING"
                }
            ]
        }
    ]
}

JSONObject object = new JSONObject();
object.put("name", "sample");
JSONArray array = new JSONArray();

JSONObject arrayElementOne = new JSONObject();
arrayElementOne.put("setId", 1);
JSONArray arrayElementOneArray = new JSONArray();

JSONObject arrayElementOneArrayElementOne = new JSONObject();
arrayElementOneArrayElementOne.put("name", "ABC");
arrayElementOneArrayElementOne.put("type", "STRING");

JSONObject arrayElementOneArrayElementTwo = new JSONObject();
arrayElementOneArrayElementTwo.put("name", "XYZ");
arrayElementOneArrayElementTwo.put("type", "STRING");

arrayElementOneArray.put(arrayElementOneArrayElementOne);
arrayElementOneArray.put(arrayElementOneArrayElementTwo);

arrayElementOne.put("setDef", arrayElementOneArray);
array.put(arrayElementOne);
object.put("def", array);

10/03/2020
1. while fetching the answer get the video name also to stream the video----pending
2.php for uploading the player data..

11/03/2020
1. download correct answer result ---
	678:Top Middle:Push:240:10,678:Middle middle:Drive:602:12 ----------- server result 
	1:678:Top Middle:0:240:10:,2:678:Middle middle:0:602:12:, ----------app result
2. xml formed and sent to server 

<player_record>
<selection>
<shot_type>Push</shot_type>
<shot_location>Top middle</shot_location>
<time>14</time>
<score>2</score>
<vid>678</vid></selection>

<selection>
<shot_type>Drive</shot_type>
<shot_location>Middle middle</shot_location>
<time>13</time>	
<score>2</score>
<vid>678</vid></selection>

<selection>
<shot_type>Drive</shot_type>
<shot_location>Top middle</shot_location>
<time>7</time>
<score>1</score>
<vid>678</vid></selection>

<selection>
<shot_type>Drive</shot_type>
<shot_location>Middle middle</shot_location>
<time>9</time>
<score>3</score>
<vid>678</vid></selection>

<selection>
<shot_type>Push</shot_type>
<shot_location>Top middle</shot_location>
<time>10</time>
<score>3</score>
<vid>678</vid></selection>

<selection>
<shot_type>Drive</shot_type>
<shot_location>Middle middle</shot_location>
<time>11</time>
<score>3</score>
<vid>678</vid></selection>

<selection>
<shot_type>Push</shot_type>
<shot_location>Top middle</shot_location>
<time>19</time>
<score>2</score>
<vid>678</vid></selection>

<selection>
<shot_type>Drive</shot_type>
<shot_location>Middle middle</shot_location>
<time>11</time>
<score>3</score>
<vid>678</vid></selection>

<total_time>94</total_time>
<total_score>19</total_score>
<pid>047</pid>
</player_record>


null1:Push:Top Middle:240:10:678:,2:Drive:Middle middle:602:12:678:,

2. clear the sqlite soon after syncing to serve-- pending

java.lang.RuntimeException: Failure delivering result ResultInfo{who=null, request=1, result=-1, data=Intent { (has extras) }} to activity {com.example.my_badminton/com.example.my_badminton.PlayVideo}: java.lang.NullPointerException: Attempt to invoke virtual method 'boolean java.lang.String.equalsIgnoreCase(java.lang.String)' on a null object reference

3.



<selection%d>
<shot_type>%s</shot_type>
<shot_location>%s</shot_location>
<time>%s</time>
<score>%s</score>
</selection%s>

12/03/2020
1. pid in xml is hardcoded, shd be fetched from db or server.
2. to get the video id by sending the u_id
to get the vid which are not viewed by the u_id--->SELECT DISTINCT `V_ID` FROM `ANSWERS` WHERE `V_ID` NOT IN(select `V_ID` from USER_LOG WHERE U_ID=1) order by RAND() limit 1 
to get the pauses for the above query---->SELECT * FROM `ANSWERS` WHERE `V_ID` = (SELECT DISTINCT `V_ID` FROM `ANSWERS` WHERE `V_ID` NOT IN(select `V_ID` from USER_LOG WHERE U_ID=1) order by RAND() limit 1)
3. get the video id and pauses for it ----done
4. implement the watch nextvideo()---- done


13/03/2020
1. get the videos wen next video button is pressed
2. in between of the video if player comes out of the game then starts from beginning.
	soln: get the last pause from local db and assign it to answerCount---------------least priority----pending
problem : after resuming, oncreate the videoName is fetched from server and played(video name is random, need not be the same video which was paused )
soln: store the videoname in db, on resuming the video, fetch the video name from the dblite----done
	
to test
1. fetch video from server
2. delete tables once game is over
3. sync data to server in table player_answer_info and player_pause_answers.
4. update in server table user log. 


download_player_answers.php response:
2:bottom:net:2000:,2:bottom:Drop:2000:,videos/video2.mp4

correctAnswers = {String[3]@5759}(split by ,)
 0 = "2:bottom:net:2000:" 
answerContents = {String[4]@5849} (split by :
 0 = "2"
 1 = "bottom"
 2 = "net"
 3 = "2000"
 1 = "2:bottom:Drop:2000:"
 2 = "videos/video2.mp4"


3:top right:net:2000:12,3:top right:Drive:2000:15,videos/video3.mp4



<player_record>
<selection>
<shot_type>Push</shot_type>
<shot_location>Top middle</shot_location>
<time>6</time>
<score>1</score>
<vid>2</vid></selection>

<total_time>6</total_time>
<total_score>1</total_score>
<pid>047</pid>
</player_record>

1.if (correctShotType[answerCount].equalsIgnoreCase(shotType)) { in play video class this line code crashing
2.insert into user_log watch_flag field is default set to 0 
	

16/03/2020
1.680:Middle Middle:Drive:234:15,videos/video1.mp4
2. next video is playing the same video....pending, wen it comes back to play video starts playin the same video so added onResume and onPostResume(), but not helping---Done
3. delete the db after sync to server ---done
4. check my answers review --- done
5. delete db after pressing next video. ----done	

things to ask praveen
2. automation of level for player after playing all the videos with threashold score.
3.get the videos on the basis of level assigned to it when initially getting the answer/pauses


2020-03-16 18:02:20.656 13269-13269/com.example.my_badminton E/AndroidRuntime: FATAL EXCEPTION: main
    Process: com.example.my_badminton, PID: 13269
    java.lang.IllegalArgumentException: reportSizeConfigurations: ActivityRecord not found for: Token{1437f44 ActivityRecord{2104857 u0 com.example.my_badminton/.ViewAnswers t-1 f}}
        at android.os.Parcel.readException(Parcel.java:2020)
        at android.os.Parcel.readException(Parcel.java:1962)
        at android.app.IActivityManager$Stub$Proxy.reportSizeConfigurations(IActivityManager.java:9312)
        at android.app.ActivityThread.reportSizeConfigurations(ActivityThread.java:2956)
        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2899)
        at android.app.ActivityThread.-wrap11(Unknown Source:0)
        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1616)
        at android.os.Handler.dispatchMessage(Handler.java:106)
        at android.os.Looper.loop(Looper.java:176)
        at android.app.ActivityThread.main(ActivityThread.java:6651)
        at java.lang.reflect.Method.invoke(Native Method)
        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:547)
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:824)
2020-03-16 18:02:20.750 13269-13995/com.example.my_badminton D/Response fro


18/03/2020
1. sync to server xml data

<player_record>
<selection>
<shot_type>Push</shot_type>
<shot_location>Middle middle</shot_location>
<time>14</time>
<score>0</score>
<vid>2</vid></selection>

<selection>
<shot_type>Drive</shot_type>
<shot_location>Middle middle</shot_location>
<time>15</time>
<score>0</score>
<vid>2</vid></selection>

<total_time>29</total_time>
<total_score>0</total_score>
<pid>047</pid>
</player_record>

2. pooja pending module
1. password reset
2. database connectivity for admin and coach

3. merge my code in her code --- pending
4. check video_upload.php ---- done
5. convert one of the project to library

19/03/2020

things to tell pooja
1.web service  in MyDbAdapter
2. to add saved preferances 

20/03/2020
activities
1. /home/megha/Desktop/badminton/pooja/My_Badminton_megha(before cleanup) is my code before cleaning up
2


pooja's code

the code containing SQLiteOpenHelper
1.MyDbAdapter -- 
2. ScoreStorageAdapter--
3.

things to do
3.background color change
4. font
5. merge
6. start game button background





1.clean up my code--- done
2. test cleaned up code.----pending
3.merge with poojas code.-pending
4. test after merging---pending
5.change the path to uploads from videos in code(videos are beeing taken from videos folder in php)



xml files
list_of_answers
fragment_shot_location
activity_paly_video--- 
activity_submit_answer
fragment_shot_type
activity_view_answer
cutom_lisview_row


22/03/2020
1.change the app bg-- pending
2. completed all the levels shd be shown in some activity.


23/03/2020
1. no logout in playvideo.
2. pin generation
3. reggistration pin is 1234.
4. pin reset 
5. after initial play reset the pin 
		enter new pin
		reset the pin
		confirm.
		parents mailid
forgot password below signup
6. change the font style and size
7. menu item “Add kid” menu item



24/03/2020
1. line#175,189,202 skipped


26/03/2020
1.all the 4 modules server -megha. app-pooja.
2. performance graphs.
3. login server side -megha.
4. score(performance) server side-megha
5. coach and mentor.

6. skip button in score entry when no training , use the previous scores
7. karthiksaid hell send code to send mail


username=Karthik acharya&password=karthik
http://stage1.optipacetech.com/badminton/login.php 


30/03/2020
cd /var/www/html/badminton/megha/


26/03/2020
• Login check for score level entry should be removed.

dmat nsc
_____________________________________________________________________________________________________________________________
request xml while registerning.
_____________________________________________________________________________________________________________________________
<user_details>
    <userName>Achyuth</userName>
    <password>megha</password>
    <userType>Player</userType>
    <uAge>0</uAge>
    <uDob> 2020-2-10
    </uDob>
    <usex>Male</usex>
    <ueducation>School</ueducation>
    <umailid>aeghm02@gmail.com</umailid>
    <utraining>xyz Traning</utraining>
     <uothers>no Center</uothers>
    <ustateRanking>1</ustateRanking>
    <unationalRank>2</unationalRank>
    <uphoto>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
2020-04-03 14:10:14.544 5858-9244/com.example.myapp_badminton D/Response from Server:  200
2020-04-03 14:10:14.558 5858-5858/com.example.myapp_badminton E/ViewUserDetail out: Upload status<script src="//code.jquery.com/jquery-1.10.2.js"></script><script>function sendMail(name,email){	alert (name);	window.location='megha/mail.php?fullname='+name+'&email='+email;}</script><script type='text/javascript'>sendMail('Achyuth', 'aeghm02@gmail.com');</script>Registered Successfully

_____________________________________________________________________________________________________________________________

to be discussed with digit id-whether device is 2 sim slot, 5.1


important links regarding hardware id 
1. to read androif device id(without sim):
 https://stackoverflow.com/questions/2785485/is-there-a-unique-android-device-id

2. How to retrieve an Unique ID to identify Android devices ?
https://medium.com/@ssaurel/how-to-retrieve-an-unique-id-to-identify-android-devices-6f99fd5369eb

3. code written from 
https://stackoverflow.com/questions/14517338/android-check-whether-the-phone-is-dual-sim/17499889#17499889
____________________________________________________________________________________________________________________________
08/04/2020
mysqli_query($con,$qry) ---> executes the query
mysqli_query(con,qry)



http://stage1.optipacetech.com/badminton/megha/forgot_password.php

http://stage1.optipacetech.com/badminton/megha/forgot_password.php?mail_id=aeghm02@gmail.com
http://stage1.optipacetech.com/badminton/megha/forgot_pin.php?mail_id=aeghm02@gmail.com


10/04/2020
mail is sent to the CC ppl even when ther is not TO address is not there


13/04/2020
 select  OTP from PLAYER_OTP where id=(SELECT max(id) from PLAYER_OTP) 1664
select  OTP from PLAYER_OTP where MAIL_ID='aeghm02@gmail.com'

SELECT OTP FROM PLAYER_OTP WHERE id=(SELECT max(id) from PLAYER_OTP)and MAIL_ID='aeghm02@gmail.com'

select  OTP from PLAYER_OTP where MAIL_ID='aeghm02@gmail.com' and id=(SELECT max(id) from PLAYER_OTP) --->correct



diary
1. downloaded poojas code named 07/04/2020.
2. need to merge in app.
3. there is a backup named MyApp_Badminton(backup) under C:\Users\Neeraj\Desktop\megha\optipace\pooja which is the code before merging poojas code.
4. working on file sent on 08/04/2020.
5. scoreEntry_fragment.java is already added

validate($email){
filter_var()
}

Remark if any Megha


"API:
http://stage1.optipacetech.com/badminton/megha/password_reset.php
Request: mail_id=""""&new_password=""""
Responses:
00 - Invalid parameters
01 - Database connectivity error
02 - Database execution error
0 successful
"

"API: http://stage1.optipacetech.com/badminton/megha/pin_reset.php
Request: mail_id=""""&new_pin=""""
Responses:
00: Invalid parameters
01 - Database connectivity error
02 - Invalid session
0 -successful"


API:
http://stage1.optipacetech.com/badminton/megha/password_reset.php
Request: mail_id=""&new_password=""
Responses:
00 - Invalid parameters
01 - Database connectivity error
02 - Database execution error
0 successful

API: http://stage1.optipacetech.com/badminton/megha/pin_reset.php
Request: mail_id=""&new_pin=""
Responses:
00: Invalid parameters
01 - Database connectivity error
02 - Invalid session
0 -successful


sowmyanagraj@19

https://stackoverflow.com/questions/12872594/php-email-verification----->VRFY command is disabled on almost all smtp servers because of spammers.

public function check($email) { 
        $result = FALSE; 

        if (!self::validate($email)) { 
            $this->set_error("{$email} incorrect e-mail"); 
            $this->edebug($this->ErrorInfo); 
            if ($this->exceptions) { 
                throw new verifyEmailException($this->ErrorInfo); 
            } 
            return FALSE; 
        } 
        $this->error_count = 0; // Reset errors 
        $this->stream = FALSE; 

        $mxs = $this->getMXrecords(self::parse_email($email)); 
        $timeout = ceil($this->max_connection_timeout / count($mxs)); 
        foreach ($mxs as $host) { 
            /** 
             * suppress error output from stream socket client... 
             * Thanks Michael. 
             */ 
            $this->stream = @stream_socket_client("tcp://" . $host . ":" . $this->port, $errno, $errstr, $timeout); 
            if ($this->stream === FALSE) { 
                if ($errno == 0) { 
                    $this->set_error("Problem initializing the socket"); 
                    $this->edebug($this->ErrorInfo); 
                    if ($this->exceptions) { 
                        throw new verifyEmailException($this->ErrorInfo); 
                    } 
                    return FALSE; 
                } else { 
                    $this->edebug($host . ":" . $errstr); 
                } 
            } else { 
                stream_set_timeout($this->stream, $this->stream_timeout); 
                stream_set_blocking($this->stream, 1); 

                if ($this->_streamCode($this->_streamResponse()) == '220') { 
                    $this->edebug("Connection success {$host}"); 
                    break; 
                } else { 
                    fclose($this->stream); 
                    $this->stream = FALSE; 
                } 
            } 
        } 

        if ($this->stream === FALSE) { 
            $this->set_error("All connection fails"); 
            $this->edebug($this->ErrorInfo); 
            if ($this->exceptions) { 
                throw new verifyEmailException($this->ErrorInfo); 
            } 
            return FALSE; 
        } 

        $this->_streamQuery("HELO " . self::parse_email($this->from)); 
        $this->_streamResponse(); 
        $this->_streamQuery("MAIL FROM: <{$this->from}>"); 
        $this->_streamResponse(); 
        $this->_streamQuery("RCPT TO: <{$email}>"); 
        $code = $this->_streamCode($this->_streamResponse()); 
        $this->_streamResponse(); 
        $this->_streamQuery("RSET"); 
        $this->_streamResponse();
        $code2 = $this->_streamCode($this->_streamResponse()); 
        $this->_streamQuery("QUIT"); 
        fclose($this->stream); 
        
        $code = !empty($code2)?$code2:$code;
        switch ($code) { 
            case '250': 
            /** 
             * http://www.ietf.org/rfc/rfc0821.txt 
             * 250 Requested mail action okay, completed 
             * email address was accepted 
             */ 
            case '450': 
            case '45s1': 
            case '452': 
                /** 
                 * http://www.ietf.org/rfc/rfc0821.txt 
                 * 450 Requested action not taken: the remote mail server 
                 * does not want to accept mail from your server for 
                 * some reason (IP address, blacklisting, etc..) 
                 * Thanks Nicht Lieb. 
                 * 451 Requested action aborted: local error in processing 
                 * 452 Requested action not taken: insufficient system storage 
                 * email address was greylisted (or some temporary error occured on the MTA) 
                 * i believe that e-mail exists 
                 */ 
                return TRUE;
            case '550':
                return FALSE; 
            default : 
                return FALSE; 
        } 
    } 

26/04/2020

api to get the player dedyails.... create tables
rename forgot_code.php to gen_otp.php ----done


select academy_id  where academy_name="" and location=""


30/04/2020
not able to change the type in the server for academy Id in userdetails table frm varchar to int. ---> ask karthik(cant do if values are already stored init).

selection of training type
fething of the layer


1.send app screen shot .doc
2.i did for player let pooja see if she has changes in player then 
3.in coach skip button,


___________________________________________________________________________________________________________________________________________________

sticky notes
API for local database
try adding multiple academy id for existing coachid.

1. get_players_details.php requires add player module to be done   first to map the player and the coach.
2. Q. whats the use of add_player when we have registration page
A. to map coach with player. 
instead of academy name and location, use location id
For coach to select academy ,level and city--> what is this
to register as coach why there is adding loction at app level,since it is happening by admin.

why shd coach register? let him signin directly! since he is added already by admin, let the admin add the phone number of coach while adding(can be used as primary key)

oh baby
taskent file


clean the inbox
do the registration
post method test 
make doucment ---- done
error code 03.

to ask karthik
1. add api and send the same modules document.
2. whats the use of reset password? since it the part of the forgot password..  
3. REGISTER WITH OTP SENT TO MAIL ID. 

while fething the otp, fetch the recent ones
changes made shd be shown in history sheet.. evening..


me1. where shd the reset pin be present  in UI?
2. during register, first send send mail, on succsessful, store in :server db.
3.post fields in password_reset.php 
4. server returns successful even wen there are 0 records affected(to avoid this do point 2)




registration page stays in the same page.---later
2.shared preferances for registration 
3. confirm password in registration.l
____________________________________________________________________________________________________________________________________________
4/5/2020
currently working on
C:\Users\Neeraj\Desktop\megha\optipace\pooja\MyApp_Badminton


05/05/2020
populate the spinner for locations only those academy which are mapped
get the locations in json form from server
______________________________________________________________
json response:
______________________________________________________________
$_blind['session_id']           =  $uuid;
$_blind['operator_name']        =  $email;
$_blind['operator_full_name']   =  $operator_full_name[0];
$_blind['device_id']            =  $login_qry_record[4];
$_blind['location_id']          =  $location_id_arr[0];
$_blind['location_name']        =  $loc_nme_info[0];
$_blind['operator_id']          =  $operator_full_name[1];
$_blind['device_hw_id']         =  $device_hwid;
$_blind['server_time_stamp']    =  $server_time_stamp;
//$_blind['transaction_counter']  =  ($login_qry_record[5] ) % 1000;
//$_blind['tariff_arr_size']      =  $count;
//$_blind['tariff_arr']           =  $tariff_details_arr;
//$_blind['monthly_pass_arr_size']=  $pass_count;
//$_blind['monthly_pass_arr']     =  $monthly_pass_arr;

$mysqli->close();

$response = json_encode($_blind);
print_r($response);
______________________________________________________________

String response:
______________________________________________________________
$result = $mysqli->query($qry);

if(!$result) {
   $error = $mysqli->error;
   $mysqli->close();
   printf("02");
   exit();
}elseif ($result->num_rows < 1) {
  printf("03");
  $mysqli->close();
  exit();
}
$res=$result->fetch_assoc();
$qry ="SELECT * FROM `ANSWERS` WHERE `V_ID`='".$res["V_ID"]."' order by PAUSES * 1";
$result = $mysqli->query($qry);
while($row=mysqli_fetch_array($result)){
        $pause=$row["PAUSES"]*1000;
        echo $row["V_ID"].":"
                .$row["SHOT_LOCATION"].":"
                .$row["SHOT_TYPE"].":"
                .(int)$pause.":"
                .$row["MAX_TIME"].",";
}

________________________________________________________________
xml response
________________________________________________________________
get data in XML
$i = 0;
$sql="SELECT * FROM `DEVICE_INFO` WHERE 1";
$result=$conn->query($sql);
$cnt=$result->num_rows;
echo "<deviceDetails>\n";
        echo "<totCount>".$cnt."</totCount>\n";
     // output data of each row
     while($row = $result->fetch_assoc()) {
                echo "<detail".$i.">\n";
                //echo "<detail>\n";
                echo "<DEVICE_NAME>".$row['DEVICE_NAME']."</DEVICE_NAME>\n";
                echo "<DEVICE_ID>".$row['DEVICE_ID']."</DEVICE_ID>\n";
                echo "<MAC_ID>".$row['MAC_ADDRESS']."</MAC_ID>\n";
                echo "<STATUS>". $row['CONNECTION_STATUS'] ."</STATUS>\n";
                echo "<DATE>". $row['DATE'] ."</DATE>\n";
                echo "<TIME>". $row['TIME'] ."</TIME>\n";
                //echo "</detail>\n";
                echo "</detail".$i.">\n";
                $i++;
     }


______________________________________________________________

$i = 0;
//echo $count;
$sql="SELECT * FROM `DEVICE_INFO` WHERE 1";
$result=$conn->query($sql);
$cnt=$result->num_rows;
echo "<deviceDetails>\n";
//if ($count > 0) {
        echo "<transCount>". $count . "</transCount>\n";
        echo "<totCount>".$cnt."</totCount>\n";
     // output data of each row
     while($row = $result->fetch_assoc()) {
                echo "<detail".$i.">\n";
                //echo "<detail>\n";
                echo "<DEVICE_NAME>".$row['DEVICE_NAME']."</DEVICE_NAME>\n";
                echo "<DEVICE_ID>".$row['DEVICE_ID']."</DEVICE_ID>\n";
                echo "<MAC_ID>".$row['MAC_ADDRESS']."</MAC_ID>\n";
                echo "<STATUS>". $row['CONNECTION_STATUS'] ."</STATUS>\n";
                echo "<DATE>". $row['DATE'] ."</DATE>\n";
                echo "<TIME>". $row['TIME'] ."</TIME>\n";
                //echo "</detail>\n";
                echo "</detail".$i.">\n";
                $i++;
     }
/*} else {
     echo "0 results";
}*/
echo "</deviceDetails>";
______________________________________________________________

add the AppCompatAutoCompleteTextView

_________________________________________________________________
06/06/2020
add academy name in xml


08/06/2020
{
  "countries": [
    {
      "country": "Afghanistan",
      "states": ["Badakhshan", "Badghis", "Baghlan", "Balkh", "Bamian", "Daykondi", "Farah", "Faryab", "Ghazni", "Ghowr", "Helmand", "Herat", "Jowzjan", "Kabul", "Kandahar", "Kapisa", "Khost", "Konar", "Kondoz", "Laghman", "Lowgar", "Nangarhar", "Nimruz", "Nurestan", "Oruzgan", "Paktia", "Paktika", "Panjshir", "Parvan", "Samangan", "Sar-e Pol", "Takhar", "Vardak", "Zabol"]
    },
    {
      "country": "India",
      "states": ["Andaman and Nicobar Islands", "Andhra Pradesh", "Arunachal Pradesh", "Assam", "Bihar", "Chandigarh", "Chhattisgarh", "Dadra and Nagar Haveli", "Daman and Diu", "Delhi", "Goa", "Gujarat", "Haryana", "Himachal Pradesh", "Jammu and Kashmir", "Jharkhand", "Karnataka", "Kerala", "Lakshadweep", "Madhya Pradesh", "Maharashtra", "Manipur", "Meghalaya", "Mizoram", "Nagaland", "Orissa", "Pondicherry", "Punjab", "Rajasthan", "Sikkim", "Tamil Nadu", "Tripura", "Uttaranchal", "Uttar Pradesh", "West Bengal"]
    },
    {
      "country": "Belarus",
      "states": ["Brest", "Homyel", "Horad Minsk", "Hrodna", "Mahilyow", "Minsk", "Vitsyebsk"]
    } 
]

}

var stateObject = 
{
"India": { "Delhi": ["new Delhi", "North Delhi"],
"Kerala": ["Thiruvananthapuram", "Palakkad"],
"Goa": ["North Goa", "South Goa"],
},
"Australia": {
"South Australia": ["Dunstan", "Mitchell"],
"Victoria": ["Altona", "Euroa"]
}, "Canada": {
"Alberta": ["Acadia", "Bighorn"],
"Columbia": ["Washington", ""]
},
}


,<states>
	<Karnataka>
		<Bengaluru>
			<Nagarabavi>ajith training center</Nagarabavi>
			<Nagarabavi>megha training center</Nagarabavi>
			<horamavu>megha training center</horamavu>
			<horamavu>Karthik training center</horamavu>
		</Bengaluru>
		<Belagavi>
			<MGRoad>mmyyass</MGRoad>
		</Belagavi>
	</Karnataka>
	<Telangaana>
		<Hydrabaad>
			<paatabasti>karth coaching center</paatabasti>
		</Hydrabaad>
	</Telangaana>
	<TamilNadu>
		<chennai>
			<MGroad>Jyothi badminton experts</MGroad>
			<MGroad>omkar badminton experts</MGroad>
		</chennai>
	</TamilNadu>
</states>

14/05/2020

TamilNadu,Telangaana,Karnataka-

chennai;Hydrabaad;Belagavi,Bengaluru-

MGroad;paatabasti;MGRoad;JpNagar,horamavu,Nagarabavi-

omkar badminton experts,Jyothi badminton experts;karth coaching center;mmyyass;BadmintonExperts;Karthik training center,megha training center;megha training center,ajith training center



the location is not coming!!


Split works with ::



state_Spinner = (Spinner) findViewById(R.id.state);
        city_Spinner = (Spinner) findViewById(R.id.city);
        location_spinner = findViewById(R.id.location);


statesList = new ArrayList<>();
        citiesList = new ArrayList<>();

https://www.zoftino.com/android-spinner-dropdown-list

https://github.com/pankajnimgade/Tutorial/blob/master/app/src/main/java/spinner/list/activities/SpinnerCountryActivity.java



change the <header>

confirm_otp.php:		header('Location: ../user_details.php?password='.$otp.'&module='.$module);
confirm_otp.php://	header('Location: mail.php?module='.$module.'&email='.$mail_id.'&otp='.$otp);
gen_otp.php:	header('Location: mail.php?module='.$module.'&email='.$mail_id.'&otp='.$otp);
pre_register.php:	header('Location: gen_otp.php?module=pre_registration&mail_id='.$umailid);
user_details.php://	header('Location: megha/mail.php?module=user_details&fullname='.$uName.'&email='.$umailid);

INSERT INTO `COACH_PLAYER`(`C_NAME`, `C_ID`, `P_NAME`, `P_ID`) VALUES ('Ashok',4,'Jyothi',1089)




SELECT * FROM ACADEMY WHERE ID in(select ACADEMY_ID from COACH_PLAYER WHERE C_ID ='22')



SELECT * FROM USER_DETAILS WHERE USER_ID IN (SELECT P_ID FROM `COACH_PLAYER` WHERE ACADEMY_ID=2 AND C_ID=22)AND TRAINING_LEVEL=4


<user_details>
<userName>Meg</userName>
<phoneNumber>9740969063</phoneNumber>
<uAge>20</uAge>
<uDob> 2000-5-25
</uDob>
<usex>Female</usex>
<ueducation>College</ueducation>
<umailid>aeghm02@gmail.com</umailid>
<state>Karnataka</state>
<city>Bengaluru</city>
<location>Jp Nagar</location>
<academyName>Badminton Experts</academyName>
 <uothers>no Center</uothers>
<ustateRanking>12</ustateRanking>
<unationalRank>32</unationalRank>
<uphoto></uphoto>
</user_details>



pooja teamviewver id 1672448691


trail
SELECT (SCORE,ENTRY_DATE FROM COACH_PLAYER WHERE P_ID IN(SELECT P_ID FROM `COACH_PLAYER` WHERE ACADEMY_ID=1 AND C_ID=22)),USER_ID,USER_NAME,PHOTO FROM USER_DETAILS WHERE USER_ID IN (SELECT P_ID FROM `COACH_PLAYER` WHERE ACADEMY_ID=1 AND C_ID=22)

SELECT SCORE,ENTRY_DATE FROM COACH_SCORE WHERE P_ID IN(SELECT P_ID FROM `COACH_PLAYER` WHERE ACADEMY_ID=2 AND C_ID=22)



SELECT SCORE,ENTRY_DATE,P_ID FROM COACH_SCORE WHERE P_ID IN(SELECT P_ID FROM `COACH_PLAYER` WHERE ACADEMY_ID=2 AND C_ID=22)

SELECT USER_ID,USER_NAME,PHOTO FROM USER_DETAILS WHERE USER_ID IN (SELECT P_ID FROM `COACH_PLAYER` WHERE ACADEMY_ID=2 AND C_ID=22)AND TRAINING_LEVEl=2;




SELECT SCORE,ENTRY_DATE,P_ID FROM COACH_SCORE WHERE P_ID IN(SELECT P_ID FROM `COACH_PLAYER` WHERE ACADEMY_ID=1 AND C_ID=22)AND ENTRY_DATE IN(SELECT MAX(ENTRY_DATE) FROM COACH_SCORE)




01/06/2020
SELECT P_ID,SCORE,ENTRY_DATE FROM PLAYER_SCORE WHERE P_ID='1099' and  ENTRY_DATE IN(SELECT MAX(ENTRY_DATE) FROM PLAYER_SCORE)
SELECT P_ID,SCORE,ENTRY_DATE FROM PLAYER_SCORE  WHERE  ENTRY_DATE IN(SELECT MAX(ENTRY_DATE) FROM PLAYER_SCORE WHERE P_ID='1099')



scp add_coach.php megha@stage1.optipacetech.com:/var/www/html/badminton



coach ajith@gmail.com, id 987,9986120875,(password)ajith


SELECT DISTINCT `V_ID` FROM `ANSWERS` WHERE `V_ID` NOT IN(select `V_ID` from USER_LOG WHERE U_ID='1099') and `V_ID` IN(SELECT V_ID FROM VIDEOS WHERE V_TYPE='level2')


SELECT V_ID FROM VIDEOS WHERE V_TYPE='level2' and `V_ID` NOT IN(select `V_ID` from USER_LOG WHERE U_ID='1099')order by RAND() limit 1



<userName>Megha k</userName>
    <phoneNumber>achyuth@gmail</phoneNumber>
    <uAge>6</uAge>
    <uDob>2014-08-12</uDob>
    <usex>Male</usex>
    <ueducation>School</ueducation>
    <umailid>achyuth@gmail.com</umailid>
    <state>Karnataka</state>
    <city>Bangalore</city>
    <location>JP Nagar</location>
    <academyName>JP Academy</academyName>
     <uothers>no Center</uothers>
    <ustateRanking></ustateRanking>
    <unationalRank></unationalRank>
    <uphoto>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
    y







    <userName>Megha k</userName>
        <phoneNumber>+919019062505</phoneNumber>
        <uAge>48</uAge>
        <uDob>1972-08-12</uDob>
        <usex>Male</usex>
        <ueducation>School</ueducation>
        <umailid>m······@optipace.in</umailid>
        <state>Karnataka</state>
        <city>Bangalore</city>
        <location>JP Nagar</location>
        <academyName>JP Academy</academyName>
         <uothers>no Center</uothers>
        <ustateRanking>1</ustateRanking>
        <unationalRank>2</unationalRank>
        <uphoto>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



_________________________________________________________________________________________________________________________________________
the preper pic change


package com.example.myapp_badminton;

import android.Manifest;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.util.Base64;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.EditText;
import android.widget.ExpandableListView;
import android.widget.GridLayout;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentTransaction;

import com.example.myapp_badminton.PlayModule.PlayVideo;
import com.google.android.material.navigation.NavigationView;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import de.hdodenhof.circleimageview.CircleImageView;

public class HomePage extends AppCompatActivity implements AsyncResponse, NavigationView.OnNavigationItemSelectedListener {
    public static final String PREFS_NAME = "LoginPrefs";
    private static final int REQUEST_RUNTIME_PERMISSIONS = 1;
    private static String[] PERMISSIONS_STORAGE = {
            Manifest.permission.READ_EXTERNAL_STORAGE,
            Manifest.permission.WRITE_EXTERNAL_STORAGE,
            Manifest.permission.CAMERA,
    };
    DrawerLayout dLayout;
    MainActivity mainActivity;
    String date, uname, id, utype, lastScoreDate, Score, playerImage, scoreFilter;
    AlertDialog alertDialog;
    CircleImageView profilePic;
    ImageView tipsImage;
    String sNewPass, sNewPassConfirm, regEmail;
    TextView tvUserMainInfo, tvUserSubInfo, totVid, playedVid, correctAns, wrongAns;
    NetworkAvailability networkAvailability;
    NavigationView navView; // initiate a Navigation View
    SharedPreferences settings;
    SharedPreferences.Editor editor;
    List<MenuModel> headerList;
    HashMap<MenuModel, List<MenuModel>> childList;
    private EditText newPass, confirmNewPass;
    private byte[] imageBytes;
    private ProgressDialog progressDialog;
    private boolean permissionGiven;
    private GridLayout gridLayout;
    private String imageString;
    private boolean scoreFilterFlag;
    private ExpandableListView expandableListView;
    private ExpandableListAdapter expandableListAdapter;
    private Fragment frag;
    private boolean expandListviewFlag = false;
    private Bitmap selectedImage;

    //    String uname,id,utype,lastScoreDate,Score;
    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        try {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.activity_home_page1);


            Log.e("onCreate: ", "***from activity***" + this.getLocalClassName());
            networkAvailability = NetworkAvailability.getInstance(this);
            Toolbar toolbar = findViewById(R.id.toolbar);// get the reference of Toolbar
            verifyStoragePermissions(this);
//            mainActivity=new MainActivity();
            gridLayout = findViewById(R.id.mainGrid);
//            setSingleEvent(gridLayout);
            profilePic = findViewById(R.id.nav_user_image);
            tvUserMainInfo = findViewById(R.id.nav_main_info);
            tvUserSubInfo = findViewById(R.id.nav_sub_info);

            totVid = findViewById(R.id.tot_video);
            playedVid = findViewById(R.id.played_video);
            correctAns = findViewById(R.id.right_answers);
            wrongAns = findViewById(R.id.wrong_answers);

            tipsImage = findViewById(R.id.image_tip);
//            setNavigationDrawer();
            setSupportActionBar(toolbar);
            settings = getSharedPreferences(PREFS_NAME, 0);
            editor = settings.edit();

            utype = settings.getString("type", "");
            if (utype.equals("coach")) {
                uname = settings.getString("Name", "");
                id = settings.getString("Id", "");
                regEmail = settings.getString("mail_id", "");
                tipsImage.setVisibility(View.GONE);

                expandableListView = findViewById(R.id.expandableListView);
                prepareMenuData();
                populateExpandableList();

                setNavigationDrawer();
                //            displayNavHeaderInfo();
//                setNavigationDrawer();
            } else {
                uname = settings.getString("Name", "");
                id = settings.getString("Id", "");
                playerImage = settings.getString("Image", "");
                Log.e("oncreate image", "image " + playerImage);
                regEmail = settings.getString("mail_id", "");
                lastScoreDate = settings.getString("DateLastScore", "");
                Score = settings.getString("lastScore", "");

                expandableListView = findViewById(R.id.expandableListView);
                prepareMenuData();
                populateExpandableList();


                ActivityTracker.writeActivityLogs(this.getLocalClassName(), id, getApplicationContext());
                if (isConnected()) {
                    new WebService(HomePage.this).execute(API.ServerAddress + API.AFTER_LOGIN, "user_id=" + id);
                } else {
                    setNavigationDrawer();
                }
            }
           /* expandableListView = findViewById(R.id.expandableListView);
            prepareMenuData();
            populateExpandableList();*/

            toolbar.setNavigationOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {

                    if ((permissionGiven)/* && isConnected()*/) {
                        dLayout.openDrawer(Gravity.LEFT);
                        displayNavHeaderInfo();

                       /* expandableListView = findViewById(R.id.expandableListView);
                        if (!expandListviewFlag) {
                            prepareMenuData();
                            populateExpandableList();
                            expandListviewFlag = true;
                        }*/


                    } else {
                        Toast.makeText(getApplicationContext(), "You are offline or Grant permissions", Toast.LENGTH_LONG).show();
                    }
                    tvUserMainInfo = findViewById(R.id.nav_main_info);
                    tvUserSubInfo = findViewById(R.id.nav_sub_info);
                    tvUserMainInfo.setText(uname);
                    tvUserSubInfo.setText(regEmail);

                }
            });
            setNavigationDrawer();
        } catch (Exception e) {
            e.printStackTrace();
        }


    }

    private void populateExpandableList() {

        expandableListAdapter = new ExpandableListAdapter(this, headerList, childList);
        expandableListView.setAdapter(expandableListAdapter);

        expandableListView.setOnGroupClickListener(new ExpandableListView.OnGroupClickListener() {
            @Override
            public boolean onGroupClick(ExpandableListView parent, View v, int groupPosition, long id) {

                if (headerList.get(groupPosition).isGroup) {
                    if (!headerList.get(groupPosition).hasChildren) {

                           /* WebView webView = findViewById(R.id.webView);
                            webView.loadUrl(headerList.get(groupPosition).url);
                            onBackPressed();*/

                        frag = headerList.get(groupPosition).frag;
                        if (frag != null) {
                            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
                            transaction.replace(R.id.frame, frag); // replace a Fragment with Frame Layout
                            transaction.commit(); // commit the changes
                            dLayout.closeDrawers(); // close the all open Drawer Views
                        }
                    }
                }

                return false;
            }
        });
        expandableListView.setOnChildClickListener(new ExpandableListView.OnChildClickListener() {
            @Override
            public boolean onChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition, long id) {

                if (childList.get(headerList.get(groupPosition)) != null) {
                    MenuModel model = childList.get(headerList.get(groupPosition)).get(childPosition);
                    switch (model.menuName) {
                        case "Change Profile Pic":
                            if (isConnected())
                                changeProfilePic();
//                                changeProfilePic1();
                            else {
                                Toast.makeText(HomePage.this, "No internet!", Toast.LENGTH_SHORT).show();
                            }
                            break;
                        case "Reset Password":
                            createResetPasswordAlertDialog();
                            break;
                        case "Sync Data":
                            if (isConnected())
                                sendLog();
                            else {
                                Toast.makeText(HomePage.this, "No internet!", Toast.LENGTH_SHORT).show();
                            }
                            break;
                        case "Sign Out":
                            showLogoutDialog();
                            break;

                        case "Privacy":
                            break;

                    }

                    frag = model.frag;

                    if (frag != null) {
                        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
                        transaction.replace(R.id.frame, model.frag); // replace a Fragment with Frame Layout
                        transaction.commit(); // commit the changes
                        dLayout.closeDrawers(); // close the all open Drawer Views
                    }

                    /*if (model.url.length() > 0) {
                     *//*WebView webView = findViewById(R.id.webView);
                        webView.loadUrl(model.url);
                        onBackPressed();*//*
                    }*/
                }

                return false;
            }
        });
    }

    private void changeProfilePic1() {

        try {
            Intent cameraIntent = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
            Toast.makeText(this, "Please wait..", Toast.LENGTH_SHORT).show();
            startActivityForResult(cameraIntent, 111);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }


    private void prepareMenuData() {
        MenuModel menuModel, childModel;
        List<MenuModel> childModelsList;//Menu of Android Tutorial. No sub menus
        headerList = new ArrayList<>();
        childModelsList = null;
        childList = new HashMap<>();
        if (utype.equals("player")) {
            menuModel = new MenuModel("Score Entry", true, false, new ScoreEntry_fragment(uname, id, utype, lastScoreDate, Score, playerImage));
            headerList.add(menuModel);
        } else {
            menuModel = new MenuModel("Score Entry", true, false, new ScoreEntry_fragment(uname, id, utype))
            ; //Menu of Android Tutorial. No sub menus
            headerList.add(menuModel);
        }
        if (!menuModel.hasChildren) {
            childList.put(menuModel, null);
        }

        if (utype.equals("player")) {
            menuModel = new MenuModel("Player Performance", true, true, null); //Menu of Java Tutorials
            headerList.add(menuModel);

            childModelsList = new ArrayList<>();
            scoreFilter = "Fitness";
            childModel = new MenuModel("Fitness", false, false, new Performance_fragment(uname, id, utype, lastScoreDate, Score, scoreFilter, "player"));
            childModelsList.add(childModel);

            scoreFilter = "Grip";
            childModel = new MenuModel("Grip", false, false, new Performance_fragment(uname, id, utype, lastScoreDate, Score, scoreFilter, "player"));
            childModelsList.add(childModel);

            scoreFilter = "On Court Skills";
            childModel = new MenuModel("On Court Skills", false, false, new Performance_fragment(uname, id, utype, lastScoreDate, Score, scoreFilter, "player"));
            childModelsList.add(childModel);
            if (menuModel.hasChildren) {
                Log.d("API123", "here");
                childList.put(menuModel, childModelsList);
            }
        } else {
            menuModel = new MenuModel("Player Performance", true, false, new Performance_fragment(uname, id, utype));
            headerList.add(menuModel);
            if (!menuModel.hasChildren) {
                childList.put(menuModel, null);
            }
        }

        if (utype.equals("player")) {

            menuModel = new MenuModel("Coach Score", true, true, null); //Menu of Java Tutorials
            headerList.add(menuModel);

            childModelsList = new ArrayList<>();
            scoreFilter = "Fitness";
            childModel = new MenuModel("Fitness", false, false, new Performance_fragment(uname, id, utype, lastScoreDate, Score, scoreFilter, "pCoach"));
            childModelsList.add(childModel);

            scoreFilter = "Grip";
            childModel = new MenuModel("Grip", false, false, new Performance_fragment(uname, id, utype, lastScoreDate, Score, scoreFilter, "pCoach"));
            childModelsList.add(childModel);

            scoreFilter = "On Court Skills";
            childModel = new MenuModel("On Court Skills", false, false, new Performance_fragment(uname, id, utype, lastScoreDate, Score, scoreFilter, "pCoach"));
            childModelsList.add(childModel);
            if (menuModel.hasChildren) {
                childList.put(menuModel, childModelsList);
            }
        } else {
            menuModel = new MenuModel("Coach Score", true, false, new ScoreObtained_fragment(uname, id, utype));
            headerList.add(menuModel);
            if (!menuModel.hasChildren) {
                childList.put(menuModel, null);
            }
        }
        if (utype.equals("player")) {

            menuModel = new MenuModel("Settings", true, true, null); //Menu of Python Tutorials
            headerList.add(menuModel);

            childModelsList = new ArrayList<>();

            childModel = new MenuModel("Change Profile Pic", false, false, null);
            childModelsList.add(childModel);

            childModel = new MenuModel("Reset Password", false, false, null);
            childModelsList.add(childModel);

            childModel = new MenuModel("Sync Data", false, false, null);
            childModelsList.add(childModel);

            childModel = new MenuModel("About", false, false, new About());
            childModelsList.add(childModel);

            childModel = new MenuModel("Privacy", false, false, null);
            childModelsList.add(childModel);

            childModel = new MenuModel("Sign Out", false, false, null);
            childModelsList.add(childModel);

            if (menuModel.hasChildren) {
                childList.put(menuModel, childModelsList);
            }
        } else {
            menuModel = new MenuModel("Settings", true, true, null); //Menu of Python Tutorials
            headerList.add(menuModel);

            childModelsList = new ArrayList<>();


            childModel = new MenuModel("Reset Password", false, false, null);
            childModelsList.add(childModel);

            childModel = new MenuModel("About", false, false, new About());
            childModelsList.add(childModel);

            childModel = new MenuModel("Privacy", false, false, null);
            childModelsList.add(childModel);
            childModel = new MenuModel("Sign Out", false, false, null);
            childModelsList.add(childModel);
        }

    }


    public void verifyStoragePermissions(Activity activity) {
        if (ActivityCompat.checkSelfPermission(activity, Manifest.permission.WRITE_EXTERNAL_STORAGE)
                != PackageManager.PERMISSION_GRANTED
                || ActivityCompat.checkSelfPermission(activity, Manifest.permission.READ_EXTERNAL_STORAGE)
                != PackageManager.PERMISSION_GRANTED
                || ActivityCompat.checkSelfPermission(activity, Manifest.permission.CAMERA)
                != PackageManager.PERMISSION_GRANTED) {
            Log.e("verify", "permission not given ");

            // We don't have permission so prompt the user
            ActivityCompat.requestPermissions(
                    activity,
                    PERMISSIONS_STORAGE,
                    REQUEST_RUNTIME_PERMISSIONS

            );
        } else {
            Log.e("verify", "permission given ");
            permissionGiven = true;
        }
    }

    /*@Override
    public boolean onCreateOptionsMenu(Menu menu) {
        return true;

    }

    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        switch (item.getItemId()) {
            case R.id.filter1:
                scoreFilter = "Fitness";
                return true;
            case R.id.filter2:
                scoreFilter = "Grip";
                return true;
            case R.id.filter3:
                scoreFilter = "On Court Skills";
                return true;
            default:
                return super.onOptionsItemSelected(item);

        }
    }*/

    private void setNavigationDrawer() {
        try {
            profilePic = findViewById(R.id.nav_user_image);
            tvUserMainInfo = findViewById(R.id.nav_main_info);
            tvUserSubInfo = findViewById(R.id.nav_sub_info);
            Bitmap bmp = null;
            dLayout = findViewById(R.id.drawer_layout); // initiate a DrawerLayout

            navView = findViewById(R.id.navigation);
//            displayNavHeaderInfo();
           /* Menu menu = navView.getMenu();
            if (utype.equalsIgnoreCase("coach")) {
                menu.findItem(R.id.five).setVisible(false);11
                menu.findItem(R.id.five1).setVisible(false);
                menu.findItem(R.id.five2).setVisible(false);
            }*/
            navView.setNavigationItemSelectedListener(this);

//            navView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {
//                @Override
//                public boolean onNavigationItemSelected(MenuItem menuItem) {
//                    frag = null;
//                    int itemId = menuItem.getItemId();
//
//                    // get selected menu item's id
//                    if (itemId == R.id.first) { //Score entry
//                        if (utype.equals("coach")) {
//                            frag = new ScoreEntry_fragment(uname, id, utype);
//                        } else {
//                            frag = new ScoreEntry_fragment(uname, id, utype, lastScoreDate, Score, playerImage);
//                        }
//                    } else if (itemId == R.id.second) {//performace
//                        if (utype.equalsIgnoreCase("Player")) {
///*
//                            if (itemId == R.id.filter1) {
//                                scoreFilter = "Fitness";
//                            } else if (itemId == R.id.filter2) {
//                                scoreFilter = "Grip";
//                            } else if (itemId == R.id.filter3) {
//                                scoreFilter = "On Court Skills";
//                        }*/
////                            frag = new Performance_fragment(uname, id, utype, lastScoreDate, Score, scoreFilter);
//
//                            scoreFilter = createScoreFilterDialogBox();
////                            if (scoreFilterFlag) {
////                            frag = new Performance_fragment(uname, id, utype, lastScoreDate, Score, scoreFilter);
////                            } else {
//                            Toast.makeText(HomePage.this, "select the categoty", Toast.LENGTH_SHORT).show();
////                            }
//                        } else {
//                            frag = new Performance_fragment(uname, id, utype);
//                        }
//
//                    } else if (itemId == R.id.third) {//score obtained
//                        if (utype.equalsIgnoreCase("Player")) {
//                            frag = new ScoreObtained_fragment(uname, id, utype, lastScoreDate, Score);
//                        } else {
//                            frag = new ScoreObtained_fragment(uname, id, utype);
//                        }
//                    } else if (itemId == R.id.four) { //rest password
//                        createResetPasswordAlertDialog();
//
//                        //                    frag = new ForgotPasswordFragment();
//                    } else if (itemId == R.id.five) { //playvideo
//                        if (utype.equalsIgnoreCase("Player")) {
////                            sendLog();
//                            if (isConnected())
//                                startActivity(new Intent(getApplicationContext(), PlayVideo.class));
//                            else
//                                Toast.makeText(getApplicationContext(), "You are offline", Toast.LENGTH_SHORT).show();
//                        }
//                        //                    else{
//                        //                        menu.findItem(itemId).setVisible(false);
//                        //                    }
//                    } else if (itemId == R.id.five1) { //sync
//                        if (utype.equalsIgnoreCase("Player")) {
//                            if (isConnected())
//                                sendLog();
//                            else {
//                                Toast.makeText(HomePage.this, "No internet!", Toast.LENGTH_SHORT).show();
//                            }
//                        }
//                    } else if (itemId == R.id.five2) { //chage profile pic
//                        if (utype.equalsIgnoreCase("Player")) {
//                            if (isConnected())
//                                changeProfilePic();
//                            else {
//                                Toast.makeText(HomePage.this, "No internet!", Toast.LENGTH_SHORT).show();
//                            }
//                        }
//                    } else if (itemId == R.id.six)//refer to about
//                    {
//                        frag = new About();
//                    } else if (itemId == R.id.seven)//refer to signout
//                    {
//                        showLogoutDialog();
//                        //                    frag = new Signout();
//                    }
//                    if (frag != null) {
//                        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
//                        transaction.replace(R.id.frame, frag); // replace a Fragment with Frame Layout
//                        transaction.commit(); // commit the changes
//                        dLayout.closeDrawers(); // close the all open Drawer Views
//                        return true;
//                    }
//                    return false;
//                }
//            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private String createScoreFilterDialogBox() {
        final CharSequence[] options = {"Fitness", "Grip", "On court", "All"};
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Select the category");
        builder.setItems(options, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int item) {

                if (options[item].equals("Fitness")) {
                    scoreFilter = "Fitness";
                    submenuClicked("fitness");
                } else if (options[item].equals("Grip")) {
                    scoreFilter = "Grip";
                    submenuClicked("grip");
                } else if (options[item].equals("On court")) {
                    scoreFilter = "On Court Skills";
                    submenuClicked("onCourt");
                } /*else if (options[item].equals("All")) {
                        scoreFilter = "All";
                    }*/
                scoreFilterFlag = true;
            }
        });
        builder.show();
        return scoreFilter;
    }

    private void submenuClicked(String subMenuName) {
        Toast.makeText(HomePage.this, " categoty selected!!", Toast.LENGTH_SHORT).show();
        Performance_fragment frag = new Performance_fragment(uname, id, utype, lastScoreDate, Score, scoreFilter);

        if (frag != null) {
            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
            transaction.replace(R.id.frame, frag); // replace a Fragment with Frame Layout
            transaction.commit(); // commit the changes
            dLayout.closeDrawers(); // close the all open Drawer Views
        }


    }

    private void changeProfilePic() {
        Log.e("changeProfilePic", "permission " + permissionGiven);
        final CharSequence[] options = {"Take Photo", "Choose from Gallery", "Cancel"};

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Choose your profile picture");

        builder.setItems(options, new DialogInterface.OnClickListener() {

            @Override
            public void onClick(DialogInterface dialog, int item) {

                if (options[item].equals("Take Photo")) {
                    Intent takePicture = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
                    startActivityForResult(takePicture, 0);

                } else if (options[item].equals("Choose from Gallery")) {
                    Intent pickPhoto = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                    startActivityForResult(pickPhoto, 1);//one can be replaced with any action code

                } else if (options[item].equals("Cancel")) {
                    dialog.dismiss();
                }
            }
        });
        builder.show();


    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (resultCode != RESULT_CANCELED) {
            Bitmap photo;

            switch (requestCode) {
                case 111:
                    if (requestCode == 111 && resultCode == Activity.RESULT_OK) {
                        photo = (Bitmap) data.getExtras().get("data");
                        profilePic.setImageBitmap(selectedImage);

                        convertTobase641(photo);
                        break;
                    }
                case 0:
                    if (resultCode == RESULT_OK && data != null) {
                        selectedImage = (Bitmap) data.getExtras().get("data");
                        profilePic.setImageBitmap(selectedImage);



                        convertTobase64(selectedImage);
                        /*profilePic.setImageBitmap(selectedImage);
                        convertTobase64(selectedImage);*/

                    }

                    break;
                case 1:
                    if (resultCode == RESULT_OK && data != null) {
                        Uri selectedImage = data.getData();
                        String[] filePathColumn = {MediaStore.Images.Media.DATA};
                        if (selectedImage != null) {
                            Cursor cursor = getContentResolver().query(selectedImage,
                                    filePathColumn, null, null, null);
                            if (cursor != null) {
                                cursor.moveToFirst();

                                int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
                                String picturePath = cursor.getString(columnIndex);

                                /*Bitmap bm = BitmapFactory.decodeFile(picturePath);
                                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                                bm.compress(Bitmap.CompressFormat.JPEG, 100, baos); // bm is the bitmap object
                                byte[] b = baos.toByteArray();

                                String encodedImage = Base64.encodeToString(b, Base64.DEFAULT);
                                Log.e("pickimage", "path image" + encodedImage);*/

                                profilePic.setImageBitmap(BitmapFactory.decodeFile(picturePath));
                                convertTobase64(BitmapFactory.decodeFile(picturePath));
                                cursor.close();
                            }
                        }

                    }
                    break;
            }
        }
    }

    private void convertTobase641(Bitmap image) {
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            image.compress(Bitmap.CompressFormat.JPEG, 100, baos); //bm is the bitmap object
            byte[] b = baos.toByteArray();
            imageString = Base64.encodeToString(b, Base64.DEFAULT);
            Log.e("imagePooja ", "convertTobase641: " + imageString);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void convertTobase64(Bitmap image) {
        try {



            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            image.compress(Bitmap.CompressFormat.JPEG, 100, baos); //bm is the bitmap object
            byte[] b = baos.toByteArray();
            imageString = Base64.encodeToString(b, Base64.DEFAULT);

            /*editor.putString("Image", imageString);
            editor.apply();*/

            Log.e("image string", "homePage" + Base64.encodeToString(b, Base64.DEFAULT) + "User id " + id);
            String xml = "<change_pic>\n" +
                    "<user_id>" + id + "</user_id>\n" +
                    "<image>" + imageString + "</image>\n" +
                    "</change_pic>\n";

//            new WebService(this).execute("http://stage1.optipacetech.com/badminton/api/" + API.PROFILE_PIC_UPDATE, xml);
            new WebService(this).execute(API.ServerAddress + API.PROFILE_PIC_UPDATE, "user_id=" + id + "&image=" + imageString);

        } catch (Exception e) {
            e.printStackTrace();
        }

    }


    private void sendLog() {
        new WebService(this).execute(API.ServerAddress + API.LOG, "badmintonLogs");
//        new WebService(this).execute(API.ServerAddress + API.LOG,new DBHandler(getApplicationContext()).getLogString() );
//        new WebService(this).execute(API.ServerAddress + API.LOG, new DBHandler(this).getLogString());


    }

    private void createResetPasswordAlertDialog() {
        try {
            LayoutInflater li = LayoutInflater.from(this);
            View confirmDialog = li.inflate(R.layout.activity_reset_password, null);
            newPass = confirmDialog.findViewById(R.id.pass_new);
            confirmNewPass = confirmDialog.findViewById(R.id.pass_confirm);
            AlertDialog.Builder alert = new AlertDialog.Builder(this);
            alert.setView(confirmDialog);
            alertDialog = alert.create();
            alertDialog.show();
//        alertDialog.setCanceledOnTouchOutside(false);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void resetPasswordOrPin(View view) {
        try {
            progressDialog = ProgressDialog.show(this, "Password Resetting", "Please wait..", false, false);
//        alertDialog.dismiss();
            sNewPass = newPass.getText().toString();
            sNewPassConfirm = confirmNewPass.getText().toString();
            if (!sNewPass.equals("")) {
                if (sNewPass.equals(sNewPassConfirm)) {
                    alertDialog.dismiss();
                    if (isConnected()) {
                        new WebService(this).execute(API.ServerAddress + API.RESET_PASSWORD, "module=password_reset" + "&mail_id=" + regEmail + "&new_pin=" + sNewPass);

                    } else {
                        Toast.makeText(this, "You are offline", Toast.LENGTH_SHORT).show();
                    }
                } else {
                    confirmNewPass.setError("password mismatch");

                }
            } else {
                newPass.setError("can't be empty");

            }
            progressDialog.dismiss();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void showLogoutDialog() {
        try {
            AlertDialog.Builder alert = new AlertDialog.Builder(HomePage.this);
            alert.setMessage("Are you sure?")
                    .setPositiveButton("Logout", new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            settings = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);
                            editor = settings.edit();
                            editor.putString("logged", "not");
                            editor.apply();
                            logout(); // Last step. Logout function

                        }
                    }).setNegativeButton("Cancel", null);

            AlertDialog alert1 = alert.create();
            alert1.show();
            alert1.setCanceledOnTouchOutside(false);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void logout() {
        startActivity(new Intent(this, Login.class));
        finish();
    }

    @Override
    public void onTaskComplete(String result) {
        try {
            Log.e("onTaskComplete: ", "res " + result);
            if (progressDialog != null) {
                progressDialog.dismiss();
            }


            setNavigationDrawer();
            switch (result) {
                case "00": {
                    Toast.makeText(this, "Invalid Request", Toast.LENGTH_LONG).show();
                    break;
                }
                case "01":
                case "02": {
                    Toast.makeText(this, "Server busy!", Toast.LENGTH_LONG).show();
                    break;
                }
                case "03": {
                    Toast.makeText(this, "User not found!", Toast.LENGTH_LONG).show();
                    break;
                }
                case "404": {
                    Toast.makeText(this, "Nothing to sync!", Toast.LENGTH_LONG).show();

                }
                case "502": {
                    Toast.makeText(this, "Try again!", Toast.LENGTH_SHORT).show();
                    break;
                }
                case "password_reset/0": {
                    Toast.makeText(this, "Password reset successfully", Toast.LENGTH_SHORT).show();
                    break;
                }
                case "file-0": { //sync data
                    Toast.makeText(this, "Sync successful", Toast.LENGTH_SHORT).show();
                    deleteFile();

                    break;
                }
                case "pic_update-0": { //profile pic update
                    Toast.makeText(this, "Pic update successful", Toast.LENGTH_SHORT).show();

                    editor.putString("Image", imageString);
                    editor.apply();

                    break;
                }
                default: { // after login


                    String[] arrRes = result.split(",");

                    if (arrRes.length < 3) {
                        Toast.makeText(this, "Request not processed!", Toast.LENGTH_SHORT).show();
                    } else if (arrRes.length == 4) { // dashboard data
                        totVid.setText(arrRes[0]);
                        playedVid.setText(arrRes[1]);
                        correctAns.setText(arrRes[2]);
                        wrongAns.setText(arrRes[3]);

                    } else /*if (arrRes.length == 3) */ {
                        lastScoreDate = arrRes[1];
                        Score = arrRes[2];

                        editor.putString("DateLastScore", lastScoreDate);
                        editor.putString("lastScore", Score);
                        editor.apply();
                        expandableListView = findViewById(R.id.expandableListView);

                        if (!expandListviewFlag) {
                            prepareMenuData();
                            populateExpandableList();
                            expandListviewFlag = true;
                        }
                        setNavigationDrawer();
                        new WebService(HomePage.this).execute(API.ServerAddress + API.PLAYER_DASHBOARD, "user_id=" + id);
                        /* displayNavHeaderInfo();*/
                    }



                    /*else {
                        imageBytes = Base64.decode(result, Base64.DEFAULT);
                        Bitmap decodedImage = BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.length);
                        profilePic.setImageBitmap(decodedImage);

                    }*/
                    break;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }


    }

    private void deleteFile() {
        try {
//            String sourceFileUri = "/storage/emulated/0/Badminton";
            String sourceFileUri = getFileUri(getApplicationContext());
            File sourceFile = new File(sourceFileUri + "/badmintonLogs.txt");
            if (sourceFile.exists()) {
                if (sourceFile.delete()) {
                    System.out.println("file Deleted :" + sourceFile.getPath());
                } else {
                    System.out.println("file not Deleted :" + sourceFile.getPath());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private String getFileUri(Context mContext) {
        try {
     /*       String fileName = "badmintonLogs.txt";
            File root = new File(Environment.getExternalStorageDirectory(), "Badminton");*/

            //
            String name = "Badminton";
            File sdcard; /*= Environment.getExternalStorageDirectory();*/
            if (mContext.getResources().getBoolean(R.bool.internalstorage)) {
                sdcard = mContext.getFilesDir();
            } else if (!mContext.getResources().getBoolean(R.bool.standalone)) {
                sdcard = new File(Environment.getExternalStoragePublicDirectory(name).toString());
            } else {
                if ("goldfish".equals(Build.HARDWARE)) {
                    sdcard = mContext.getFilesDir();
                } else {
                    // sdcard/Android/<app_package_name>/AWARE/ (not shareable, deletes when uninstalling package)
                    sdcard = new File(ContextCompat.getExternalFilesDirs(mContext, null)[0] + "/" + name);
                }
            }
            if (!sdcard.exists()) {
                sdcard.mkdirs();
            }
            return sdcard.toString();
//            return new File(sdcard, fileName);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    private void displayNavHeaderInfo() {
        try {
            profilePic = findViewById(R.id.nav_user_image);
            tvUserMainInfo = findViewById(R.id.nav_main_info);
            tvUserSubInfo = findViewById(R.id.nav_sub_info);

            if (utype.equals("player")) {

                imageBytes = Base64.decode(playerImage, Base64.DEFAULT);
                Bitmap decodedImage = BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.length);
                profilePic.setImageBitmap(decodedImage);

                profilePic.setVisibility(View.VISIBLE);

                tvUserMainInfo.setText(uname);
                tvUserSubInfo.setText(regEmail);
            } else {
                tvUserMainInfo.setText(uname);
                tvUserSubInfo.setText(regEmail);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
                                           @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        switch (requestCode) {
            case REQUEST_RUNTIME_PERMISSIONS: {
                // If request is cancelled, the result arrays are empty.
                if (grantResults.length > 0
                        && grantResults[0] == PackageManager.PERMISSION_GRANTED
                        && grantResults[1] == PackageManager.PERMISSION_GRANTED
                        && grantResults[2] == PackageManager.PERMISSION_GRANTED) {
                    permissionGiven = true;
                } else {
                    permissionGiven = false;
                    Toast.makeText(this, "Grant permissions!!", Toast.LENGTH_LONG).show();
                    Log.i("Permission", "onRequestPermissionsResult: Permission Denied");
                }
            }
        }
    }

    boolean isConnected() {
        try {
            boolean haveConnectedWifi = false;
            boolean haveConnectedMobile = false;

            ConnectivityManager cm = (ConnectivityManager) getSystemService(CONNECTIVITY_SERVICE);
            NetworkInfo[] netInfo = cm.getAllNetworkInfo();
            for (NetworkInfo ni : netInfo) {
                if (ni.getTypeName().equalsIgnoreCase("WIFI"))
                    if (ni.isConnected())
                        haveConnectedWifi = true;
                if (ni.getTypeName().equalsIgnoreCase("MOBILE"))
                    if (ni.isConnected())
                        haveConnectedMobile = true;
            }
            return haveConnectedWifi || haveConnectedMobile;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    @Override
    public boolean onNavigationItemSelected(@NonNull MenuItem menuItem) {
        return false;
    }

    public void playVideo(View view) {
        if (isConnected())
            startActivity(new Intent(getApplicationContext(), PlayVideo.class));
        else
            Toast.makeText(getApplicationContext(), "You are offline", Toast.LENGTH_SHORT).show();
    }
}
___________________________________________________________________________________________________________________________________________________________
while forming the base-64
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

 ___________________________________________________________________________________________________________________________________________________________
    //while uploading to server
    /9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/2wBDAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/wAARCAEEAMMDASIA
        AhEBAxEB/8QAHwAAAQQDAQEBAQAAAAAAAAAABgUHCAkABAoDAgEL/8QAOhAAAwACAgIBBAIBBAEE
        AAILAQIDBAUREgYTBwAUISIIMSMJFTJBURYkM0IKFzRSYSU1gUNTYnGR/8QAHQEAAAcBAQEAAAAA
        AAAAAAAAAgMEBQYHCAEJAP/EAEARAAICAQIEBQEFBgUDAwUBAAECAxEEEiEABTFBBhMiUWFxBxQy
        gZEjQmKhsfAIFVLB0TOC4UOS8SQ0Y3Kiw//aAAwDAQACEQMRAD8ArvwsbmK0YKAjcTPdHZQFCkS6
        8VUU9iuWo5Xn9f260IKYQgAaIQRxN1Vh+O3HBAFAT26j9hJ14oikn8AsnYcAoUJM8gn8owAUqU57
        qnXhgeTR+Cf+ZYAccrmOrA/5lKhf2IQoCQD+G5U8knijDrQkngk9m5OWGBNGhZWwenqrua2rYX7V
        fTjRq3Z3JA2sdD+Xc/N378bmHNphFAaYBaqkguF4bgzUPww/pwCX6qDyoDN60WUFOWk1acKeOCey
        BexPVkp1VgVA6BeCWPPbsOTow9Z/cFgVbqC47Eft+CRRgf8AwGZGYlSCSR2+lCbyT8UUAB2UlCF/
        CkflSQnVzwAQtAGKkfkEgfRLdE0OhBvSAex7bbH3BPS+DRIRfeq9ybse+1V8/wC/HuQZj1orMVPc
        qG7V6MFHIUdouFK/sqKB+OxYEct6Rrar+qC2u7AKEAQmac9j2ojKT145/Kgjg8jsQ5Rs/b/b0K46
        sHYgBeEcpzyezOgBYsAo9bFXB/5EAgfXom5bTQF2/JtRReqKosvtserBnb8lUZgRweVV2XvyQY14
        m8WrymM4uCyyZz2g1EeXBsCWYEmyfagATZPbg+NjOSoAPS2NnpVAbfG3bguXByK0n2zHg5XqyNJS
        GckuqGi0WwKgEA9gp/srQcj6+sjXXVfYt/zNevDTYhaKAhLutWB5/PAWZ4dVI57MQPLuamqq8ykJ
        TR/dz+etQ6mg5cP3moVqergEcjg9iqruuyDal+pforFps1iFojhS5YHj9noCoViB2KryCC31UGX4
        88RR2682dRoBJ8vHYjUaA0mEVfUW529tOyv/AC4PRb1WQDQIuwO4BsfJ6DsLrj7pj502WOJWNqes
        n19qJxxx2LOVoAWH4/UcDsylOByutOuYhd8jHrCqEk+gtkyZnUqBK4E2Rgo4ZTLr+wCsQSfomxMq
        OZlcDHTgS7zHXlyxXsiBVK91BU/k/n+yxH5cKk8GU3cTNJP6+fWOKAE9f7R0ZiOoKgAqTyVBPIVj
        cP7XOd4bgZLYmYqprKyosbFQFFhoWC3q/d9ybVhVfHk8Z/ChVyQAQLYDY11GwrrRv4q+AMbIlnmX
        /C8HqeVp2Kf0AQOOOB+VIA7AMDx+f2uWSq14HqdVDFVBCOe3Jc/qU/AH5Ut+xYH/AMk1yddG+YJv
        KDzM0IchQyM4DzmQADx/QB4HUqoHJPJGLaCb5YCN6kAdn9Tv/jTjlH4JVHXn/wAKSVPcHkH6n3L/
        ALauWSoFyuWzoQgZ3xpklVboMojkWI2L/DYse51Umk5RLZCsl9BqsWaHfp/M0buuEiiSZQf8ikKC
        79QUoG/PPfhuU/7HDf2T+o7E/SHsMSfqPR0DgHhWCTfjgBf77zdSeGYcL+pII5J5LK+PZCMqRuyT
        YjqzBWIXnllqFVSpY/qOeeBxzzyOGt+RdJ8hS0dU8Rxp5GwZps1VaVaxlNwcicoZKgLS8/1k5FZz
        YnlWJRjKMD7TfCfMtMScwXElOkCLORsXUxoUHa4iQdjqdfodwE8fJsuSeKMaFDuA0jsDFGCfxsT0
        Wt9r9hvtwzfk2ntbKsryIDtRiGSbgHkk8dG/KstFAI/E/wDkRwx+mp3XhXvU8SnU8DmbEE9QQwdA
        XbnkcEcfleACvHH1taP5G8rxAcXznw7yHW/Zxa2w23260lhzDxQZObJnFISU5EZvOvF1o6zSZKn6
        eXBphbfDwszCyEzMbMmt40kiMCtQKKaBe5UMo5JAHHHX8Mo4f4s/zDrikDVX/TlSQBTRsGJih+Ce
        ux4cM3kOZg0mTChQkqssel4noWKaMsAStHS+lqFhaFCFu7+LIZDUS+N6wzklVmachwSTSLDsVY8f
        nkzA5Yk8cs0+y/jNo9pR6wK4NqMwZoq0itCOAAnPr/PAb9lDD8L/AHwVstp49HKXh5ME6ghxy/Ru
        QFHVgQeVP5AXj/iykfjjXXwiVmCD1lE/B7D/AInkdF7juwIHDc9QDyQRx+A8wc9yIFpZhtsDZF3u
        bGy7X7E7cMT8qhMnmlWVlN2pIYH06QD1ruRfQ7cVV3/ibs+/XF2wYBh2DzLFfyxUHnogJJCkfngD
        8BwSVcvwb+OP/pxly8ir5uf1BWzy7Tx1YKP8aj8d2D/mvLfhSisqn9rG8X46ShUTVkKtwW7tzwSW
        cKHC0U8NwerEMqsV5J4+jzW/GVD62BlRQ5VyOGZQOCqtRWDEKT+T0f8AsH/rj67J4oyXDL6DW7GP
        Tqoe3t2Iur32ocC8iVIyv3mYoRRVnIRhtsQAfTV7EkH268QLxvhI5wFBi9i5U0mqL1IYKPYgZGIH
        IPKt15UFuA/4+nc8J/i34/XKx8zO0eJSoKsrfbTV05PIIZJfuHAJb/KDx2YLw3Bnbovj6OOESmu9
        oCEgpF0fhiQhFAFZ+FJCibUUFeSjHkh7vGvDMCIkEWsWLEhGggKuoIHdq+lmHUAuGPY9R+wb8fTR
        k+JMhlKxZDoSDYLsNI2sbkAkkC6PUEVXBMPL4tayGEEitwL2odK3W+p23qhXXhlvjb4b0+jlFcbW
        pizQp19ceDyhHYBgiEFuxdRzUdQoJA6N9TF8U8Ux5ep0bhgOhRpdWZQW7eyk2dyCp/JAVvwfyFKh
        VbQ+PQ7RZIwYqvchwYOhHIYBv2VmbsAHm4ZmA6sFDAulrtMqOqX7QoWmFSglefTjso7nrb9vwFZT
        +pA4RSp7NS5MkxDaixZrJezZOkk7NXcgDauw4cwqxqAV0XVACqG1bEWaH0B6Ue/xHSQWSqtUAXsO
        GUgqQxBUgSYfqeR+GP8AX/8AL6z6cuOi4kg9dH4HHabZDofyf+LdP6H9cEAqQVIBH1n0Z93HUlwe
        4Bm2O2wrbbtW2wr4TGUajT7XsdUQ2ta2O47bHf8AUcUVQXuiGbPPhe3IWhCkkhSG4XuyvwryYcEE
        qeo6gLMpCj8Fpmk+BRgHRuykMjDgKSrAfheaDqF6EsGY/cI95/4iA5VXPeX5UclXfkoWoo5HZgGH
        447hUP0qGDleA00YJ0ClSwp16q4igIPHPDD8kqGY8H88qZT0RaPpFkbhu3Wx06ncVddCTwJaGonY
        E7HuLI3N70fm/euPmTSIyC4M+OofgsW/cEigAVVAcMO3cABuQeQfpB3W8xtaPR1NMx0X1Dr/AIm9
        jfqW6t1PLhQeeOGPYdQCoW9jm4upxzTJsZM/E5yZKq1naZKLNHA4b9W/bkcHoCT2mS3es02w2mxO
        TsPfLHs7FZqr0YD89B3c9fUAA/AKt2oP2/RuYv4l57FyfDNSRJkOp0FiBpUb2Qb6mgNj2+o+jVpH
        CpdbdrNdLr+x368e+cNkwkuvNRlOJ5GUgZeylge0xZAGRzwOBPsvVCrfr27nU8L7yeJTJklViEpc
        ckmeRNQJ0iwPBVgxoOP3HFkPbvx9fejxY42yx8cRZsSS5U7XuLKRVXU4/RpvSbAt7Uf8Fz2TnqC6
        /RMYMWj9si0gzsrFQX47lUAYTL